========== app/Models/LinkedSocialAccount.php ==========
<?php

namespace App\Models;

use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;

class LinkedSocialAccount extends Model {
	use HasActive;

	/**
	 * The table associated with the model.
	 *
	 * @var string
	 */
	protected $table = 'linked_social_accounts';


	/**
	 * The attributes that are mass assignable.
	 *
	 * @var array
	 */
	protected $fillable = [
		'provider_name', 'provider_id','user_id'
	];


	/**
	 * The relationships that can be loaded with query string filtering includes.
	 *
	 * @var array
	 */
	public $includes = [
		'user',
	];


	public function user()
	{
    	return $this->belongsTo('App\Models\User');
	}

}
-e 

========== app/Models/MobileOtp.php ==========
<?php

namespace App\Models;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;

class MobileOtp extends Model {
	use UuidModel;

	/**
	 * The table associated with the model.
	 *
	 * @var string
	 */
	protected $table = 'mobile_otp_verifications';

	/**
	 * The attributes that are mass assignable.
	 *
	 * @var array
	 */
	protected $fillable = [
		'mobile', 'otp', 'verified',
	];

	/**
	 * The user who owns the mobile number.
	 *
	 * @return \Illuminate\Database\Eloquent\Relations\belongsTo
	 */
	public function user() {
		return $this->belongsTo(User::class, 'mobile', 'mobile');
	}

	/**
	 * Check if the OTP for the mobile number has been verified.
	 *
	 * @return bool
	 */
	public function isVerified() {
		return (bool) $this->verified;
	}
}
-e 

========== app/Models/Access/Traits/RoleTrait.php ==========
<?php

namespace App\Models\Access\Traits;

use DB;
use Cache;
use Exception;
use App\Models\Access\Permission;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Collection as BaseCollection;

trait RoleTrait
{
    /**
     * Override the "boot" method of the model.
     * The trait's "boot" method is called in the Model's "boot" method automatically.
     *
     * @return void
     */
    public static function bootRoleTrait()
    {
        /*
         * Detach all the users and permissions associated with
         * the role when it's being deleted.
         * Clear all the role cache associated with the user.
         */
        static::deleting(function ($role) {
            foreach ($role->users as $user) {
                $user->clearCache();
            }

            $role->users()->detach();
            $role->permissions()->detach();

            flush_model_cache($role);
        });

        /*
         * Clear the permissions cache when a model is saved.
         */
        static::saved(function ($role) {
            flush_model_cache($role);
        });
    }

    /**
     * Get the permissions associated with the role from the cache.
     * Cache the result only if the Cache Store supports tagging.
     * If the cache is not available/expired then cache the result and return the value.
     *
     * @return Collection
     */
    public function cachedPermissions()
    {
        if (is_cache_taggable()) {
            return Cache::tags(model_cache_tag($this, config('access.cache.tag')))
                ->remember(model_cache_key($this), config('access.cache.ttl.permissions'), function () {
                    return $this->permissions()->get();
                });
        }

        return $this->permissions()->get();
    }

    /**
     * Clear the all permissions cache.
     */
    public function clearCache()
    {
        flush_model_cache($this);
    }

    /**
     * Check if the role has permission.
     * When multiple permissions are provided it will check if any one is present.
     * When $requireAll is set to "true" then all the permissions should be present.
     *
     * Will return true without any check if the "all" field is set to true for the role.
     *
     * @param string|array $slug
     * @param bool $requireAll
     * @return bool
     */
    public function hasPermission($slug, $requireAll = false)
    {
        if ($this->all) {
            return true;
        }

        if (is_array($slug)) {
            foreach ($slug as $permissionSlug) {
                $hasPermission = $this->hasPermission($permissionSlug);

                if ($hasPermission && !$requireAll) {
                    return true;
                } elseif (!$hasPermission && $requireAll) {
                    return false;
                }
            }

            // If we've made it this far and $requireAll is FALSE, then NONE of the permissions were found
            // If we've made it this far and $requireAll is TRUE, then ALL of the permissions were found
            // Return the value of $requireAll
            return $requireAll;
        } else {
            foreach ($this->cachedPermissions() as $permission) {
                if ($slug == $permission->slug) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * Sync the provided permissions to the role.
     *
     * @param array|Collection|BaseCollection $permissions
     * @throws Exception
     */
    public function syncPermissions($permissions)
    {
        if (!(is_array($permissions) || $permissions instanceof Collection || $permissions instanceof BaseCollection)) {
            throw new Exception('Invalid permissions provided to sync.');
        }

        $this->permissions()->sync($permissions);

        $this->clearCache();
    }

    /**
     * Sync the provided permissions to the user using their slugs.
     * Input can be a string value or an array of strings.
     *
     * @param string|array $permissionSlugs
     * @throws Exception
     */
    public function syncPermissionsUsingSlug($permissionSlugs)
    {
        $permissionSlugs = array_wrap($permissionSlugs);

        $permissions = Permission::whereIn('slug', $permissionSlugs)->pluck('id');

        if ($permissions->count() !== count($permissionSlugs)) {
            throw new Exception('Invalid permission slug.');
        }

        $this->syncPermissions($permissions);
    }

    /**
     * Attach a permission to the role.
     *
     * @param integer|string|Model $permission
     * @throws Exception
     */
    public function attachPermission($permission)
    {
        $permissionId = $this->getPermissionId($permission);

        $this->permissions()->syncWithoutDetaching($permissionId);

        $this->clearCache();
    }

    /**
     * Attach permissions to the role.
     *
     * @param array|Collection $permissions
     * @throws Exception
     */
    public function attachPermissions($permissions)
    {
        if (!(is_array($permissions) || $permissions instanceof Collection)) {
            throw new Exception('Invalid permissions provided to attach.');
        }

        DB::transaction(function () use ($permissions) {
            foreach ($permissions as $permission) {
                $this->attachPermission($permission);
            }
        });
    }

    /**
     * Detach a permission from the role.
     *
     * @param integer|string|Model $permission
     * @throws Exception
     */
    public function detachPermission($permission)
    {
        $permissionId = $this->getPermissionId($permission);

        $this->permissions()->detach($permissionId);

        $this->clearCache();
    }

    /**
     * Detach permissions from the role.
     *
     * @param array|Collection $permissions
     * @throws Exception
     */
    public function detachPermissions($permissions)
    {
        if (!(is_array($permissions) || $permissions instanceof Collection)) {
            throw new Exception('Invalid permissions provided to attach.');
        }

        DB::transaction(function () use ($permissions) {
            foreach ($permissions as $permission) {
                $this->detachPermission($permission);
            }
        });
    }

    /**
     * Detach all permissions from the role.
     */
    public function detachAllPermissions()
    {
        $this->permissions()->detach();

        $this->clearCache();
    }

    /**
     * Resolve the "id" of the permission given its id/name/Model.
     *
     * @param integer|string|Model $permission
     * @return integer
     * @throws Exception
     */
    protected function getPermissionId($permission)
    {
        if (!$permission) {
            throw new Exception('No permission provided.');
        }

        if (is_string($permission) && !($permission = Permission::whereSlug($permission)->first())) {
            throw new Exception('Invalid permission slug.');
        }

        if ($permission instanceof Model) {
            $permission = $permission->getKey();
        }

        if (!is_numeric($permission)) {
            throw new Exception('Invalid permission id.');
        }

        return $permission;
    }
}
-e 

========== app/Models/Access/Traits/PermissionTrait.php ==========
<?php

namespace App\Models\Access\Traits;

trait PermissionTrait
{
    /**
     * Override the "boot" method of the model.
     * The trait's "boot" method is called in the Model's "boot" method automatically.
     *
     * @return void
     */
    public static function bootPermissionTrait()
    {
        /*
         * Detach all the roles associated with the permission when it's being deleted.
         * Clear all the permissions cache associated with the role.
         */
        static::deleting(function ($permission) {
            foreach ($permission->roles as $role) {
                $role->clearCache();
            }

            $permission->roles()->detach();
        });
    }
}
-e 

========== app/Models/Access/Role.php ==========
<?php

namespace App\Models\Access;

use App\Models\User;
use App\Models\Access\Traits\RoleTrait;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActive;

class Role extends Model
{
    use RoleTrait,HasActive;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'roles';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'slug', 'name', 'description', 'all'
    ];

    /**
     * The attributes that can be used for sorting with query string filtering.
     *
     * @var array
     */
    public $sortable = [
        'name', 'all', 'locked', 'created_at', 'updated_at'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'users', 'permissions'
    ];

    /**
     * The users associated with the role.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function users()
    {
        return $this->belongsToMany(User::class, 'role_user', 'role_id', 'user_id');
    }

   

    /**
     * The permissions associated with the role.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function permissions()
    {
        return $this->belongsToMany(Permission::class, 'permission_role', 'role_id', 'permission_id');
    }
}
-e 

========== app/Models/Access/Permission.php ==========
<?php

namespace App\Models\Access;

use Illuminate\Database\Eloquent\Model;
use App\Models\Access\Traits\PermissionTrait;

class Permission extends Model
{
    use PermissionTrait;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'permissions';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'slug', 'name', 'description','main_menu','sub_menu','main_link','icon'
    ];

    /**
     * The attributes that can be used for sorting with query string filtering.
     *
     * @var array
     */
    public $sortable = [
        'name', 'created_at', 'updated_at'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'roles'
    ];

    /**
     * The roles associated with the permission.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function roles()
    {
        return $this->belongsToMany(Role::class, 'permission_role', 'permission_id', 'role_id');
    }
}
-e 

========== app/Models/Traits/DeleteOldFiles.php ==========
<?php

namespace App\Models\Traits;

use Storage;
use Illuminate\Database\Eloquent\Model;

/**
 * Trait to auto delete the old files when updating or deleting the model.
 * Set the 'deletableFiles' property to specify the attributes which hold the file names.
 * The model should also have the 'uploadPath' method which returns the path of the files.
 *
 * @package App\Models\Traits
 */
trait DeleteOldFiles
{
    /**
     * Binds updating and deleting event to auto delete the old files.
     *
     * @return void
     */
    public static function bootDeleteOldFiles()
    {
        static::updating(function (Model $model) {
            self::deleteOldFiles($model, true);
        });

        static::deleting(function (Model $model) {
            if (!method_exists($model, 'bootSoftDeletes')) {
                self::deleteOldFiles($model);
            }
        });
    }

    /**
     * Delete the old files if they're set.
     *
     * @param Model $model
     * @param bool $updating
     */
    protected static function deleteOldFiles(Model $model, $updating = false)
    {
        $attributes = $model->deletableFiles ?? [];

        if (empty($attributes)
            || !method_exists($model, 'uploadPath')
            || is_null($uploadPath = $model->uploadPath())) {
            return;
        }

        $filesToDelete = array_map(function ($attribute) use($model, $uploadPath, $updating)  {
            if (($updating && !$model->isDirty($attribute)) || is_null($value = $model->getOriginal($attribute))) {
                return null;
            }

            return file_path($uploadPath, $value);
        }, $attributes);

        Storage::delete(array_filter($filesToDelete));
    }
}
-e 

========== app/Models/Traits/HasActiveCompanyKey.php ==========
<?php

namespace App\Models\Traits;

use Illuminate\Support\Carbon;
use App\Helpers\Exception\ExceptionHelpers;
use App\Models\Common\AdminUsersCompanyKey;
use Illuminate\Support\Facades\Auth;

trait HasActiveCompanyKey
{
    use ExceptionHelpers;
    /**
     * Scope a query to add the active condition.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeCompanyKey($query)
    {
        if (env('APP_FOR')=='demo') {
            if (auth()->user()) {
                $user_company_key = auth()->user()->company_key;
                $today = Carbon::today()->toDateString();

                if (!$user_company_key) {
                    return;
                }
                $company_key = AdminUsersCompanyKey::where('company_key', $user_company_key)->first();
                if (!$company_key) {
                    if (Auth::guard('web')->check()) {
                        auth('web')->logout();
                        request()->session()->invalidate();
                    } else {
                        auth()->user()->token()->revoke();
                    }
                }
                $ExpiryDate = Carbon::parse($company_key->expiry_date)->toDateString();
                if ($ExpiryDate < $today) {
                    if (Auth::guard('web')->check()) {
                        auth('web')->logout();
                        request()->session()->invalidate();
                    } else {
                        auth()->user()->token()->revoke();
                    }
                }
                return $query->where('company_key', $user_company_key);
            } else {
                $user_company_key = request()->company_key;
                if (!$user_company_key) {
                    return;
                }
                $today = Carbon::today()->toDateString();

                $company_key = AdminUsersCompanyKey::where('company_key', $user_company_key)->first();
                if (!$company_key) {
                    // auth()->user()->token()->revoke();
                    $this->throwAuthorizationException();
                }
                $ExpiryDate = Carbon::parse($company_key->expiry_date)->toDateString();
                if ($ExpiryDate < $today) {
                    // auth()->user()->token()->revoke();
                    $this->throwAuthorizationException();
                }
                return $query->where('company_key', $user_company_key);
            }
        }
    }
}
-e 

========== app/Models/Traits/HasActive.php ==========
<?php

namespace App\Models\Traits;

trait HasActive
{
    /**
     * Scope a query to add the active condition.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeActive($query)
    {
        return $query->where('active', true);
    }

    /**
     * Scope a query to add the inactive condition.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeInactive($query)
    {
        return $query->where('active', false);
    }

    /**
     * Check if active.
     *
     * @return bool
     */
    public function isActive()
    {
        return (bool) $this->active;
    }
}
-e 

========== app/Models/Traits/UserAccessScopeTrait.php ==========
<?php

namespace App\Models\Traits;

trait UserAccessScopeTrait
{
    /**
     * Scope a query to check if the user belongs to the role using its name.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @param array $roleSlugs
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeBelongsToRole($query, ...$roleSlugs)
    {
        if (is_array($roleSlugs[0])) {
            $roleSlugs = $roleSlugs[0];
        }

        return $query->whereHas('roles', function ($query) use ($roleSlugs) {
            $query->whereIn('slug', $roleSlugs);
        });
    }

    /**
     * Scope a query to check if the user doesn't belong to the role using its name.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @param array $roleSlugs
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeDoesNotBelongToRole($query, ...$roleSlugs)
    {
        if (is_array($roleSlugs[0])) {
            $roleSlugs = $roleSlugs[0];
        }

        return $query->whereHas('roles', function ($query) use ($roleSlugs) {
            $query->whereNotIn('slug', $roleSlugs);
        });
    }
}
-e 

========== app/Models/Traits/UserAccessTrait.php ==========
<?php

namespace App\Models\Traits;

use DB;
use Cache;
use Exception;
use App\Models\Access\Role;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Collection as BaseCollection;

trait UserAccessTrait
{
    /**
     * Override the "boot" method of the model.
     * The trait's "boot" method is called in the Model's "boot" method automatically.
     *
     * @return void
     */
    public static function bootUserAccessTrait()
    {
        /*
         * Detach all the roles associated with the user when it's being deleted.
         */
        static::deleting(function ($user) {
            if (!method_exists($user, 'bootSoftDeletes')) {
                $user->roles()->detach();

                flush_model_cache($user);
            }
        });

        /*
         * Clear the roles cache when a model is saved.
         */
        static::saved(function ($user) {
            flush_model_cache($user);
        });
    }

    /**
     * Get the roles associated with the user from the cache.
     * Cache the result only if the Cache Store supports tagging.
     * If the cache is not available/expired then cache the result and return the value.
     *
     * @return Collection
     */
    public function cachedRoles()
    {
        if (is_cache_taggable()) {
            return Cache::tags(model_cache_tag($this, config('access.cache.tag')))
                ->remember(model_cache_key($this), config('access.cache.ttl.roles'), function () {
                    return $this->roles()->get();
                });
        }

        return $this->roles()->get();
    }

    /**
     * Clear the all roles cache.
     */
    public function clearCache()
    {
        flush_model_cache($this);
    }

    /**
     * Check if the user has role.
     * When multiple roles are provided it will check if any one is present.
     * When $requireAll is set to "true" then all the roles should be present.
     *
     * @param string|array $slug
     * @param bool $requireAll
     * @return bool
     */
    public function hasRole($slug, $requireAll = false)
    {
        if (is_array($slug)) {
            foreach ($slug as $roleSlug) {
                $hasRole = $this->hasRole($roleSlug);

                if ($hasRole && !$requireAll) {
                    return true;
                } elseif (!$hasRole && $requireAll) {
                    return false;
                }
            }

            // If we've made it this far and $requireAll is FALSE, then NONE of the roles were found
            // If we've made it this far and $requireAll is TRUE, then ALL of the roles were found
            // Return the value of $requireAll
            return $requireAll;
        } else {
            foreach ($this->cachedRoles() as $role) {
                if ($slug == $role->slug) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * Check if the user has permission.
     * When multiple permissions are provided it will check if any one is present.
     * When $requireAll is set to "true" then all the permissions should be present.
     *
     * Will return true without any check if the "all" field is set to true for any of the role.
     *
     * @param string|array $slug
     * @param bool $requireAll
     * @return bool
     */
    public function hasPermission($slug, $requireAll = false)
    {
        static $isAdmin = false;

        if (is_array($slug)) {
            foreach ($slug as $permSlug) {
                $hasPerm = $this->hasPermission($permSlug);

                if ($isAdmin) {
                    return true;
                } elseif ($hasPerm && !$requireAll) {
                    return true;
                } elseif (!$hasPerm && $requireAll) {
                    return false;
                }
            }

            // If we've made it this far and $requireAll is FALSE, then NONE of the perms were found
            // If we've made it this far and $requireAll is TRUE, then ALL of the perms were found
            // Return the value of $requireAll
            return $requireAll;
        } else {
            foreach ($this->cachedRoles() as $role) {
                if ($role->all) {
                    return $isAdmin = true;
                }

                foreach ($role->cachedPermissions() as $permission) {
                    if (str_is($slug, $permission->slug)) {
                        return true;
                    }
                }
            }
        }

        return false;
    }

    /**
     * Check if the user has permission.
     * Alias for "hasPermission" method.
     *
     * @param string $permission
     * @param bool $requireAll
     * @return bool
     */
    public function can($permission, $requireAll = false)
    {
        return $this->hasPermission($permission, $requireAll);
    }

    /**
     * Sync the provided roles to the user.
     *
     * @param array|Collection|BaseCollection $roles
     * @throws Exception
     */
    public function syncRoles($roles)
    {
        if (!(is_array($roles) || $roles instanceof Collection || $roles instanceof BaseCollection)) {
            throw new Exception('Invalid roles provided to sync.');
        }

        $this->roles()->sync($roles);

        $this->clearCache();
    }

    /**
     * Sync the provided roles to the user using their slugs.
     * Input can be a string value or an array of strings.
     *
     * @param string|array $roleSlugs
     * @throws Exception
     */
    public function syncRolesUsingSlug($roleSlugs)
    {
        $roleSlugs = array_wrap($roleSlugs);

        $roles = Role::whereIn('slug', $roleSlugs)->pluck('id');

        if ($roles->count() !== count($roleSlugs)) {
            throw new Exception('Invalid role slug.');
        }

        $this->syncRoles($roles);
    }

    /**
     * Attach a role from the user.
     *
     * @param integer|string|Model $role
     * @throws Exception
     */
    public function attachRole($role)
    {   
      
        $roleId = $this->getRoleId($role);

        $this->roles()->syncWithoutDetaching($roleId);

        $this->clearCache();
    }

    /**
     * Attach roles to the user.
     *
     * @param array|Collection $roles
     * @throws Exception
     */
    public function attachRoles($roles)
    {
        if (!(is_array($roles) || $roles instanceof Collection)) {
            throw new Exception('Invalid roles provided to attach.');
        }

        DB::transaction(function () use ($roles) {
            foreach ($roles as $role) {
                $this->attachRole($role);
            }
        });
    }

    /**
     * Detach a role from the user.
     *
     * @param integer|string|Model $role
     * @throws Exception
     */
    public function detachRole($role)
    {
        $roleId = $this->getRoleId($role);

        $this->roles()->detach($roleId);

        $this->clearCache();
    }

    /**
     * Detach roles from the user.
     *
     * @param array|Collection $roles
     * @throws Exception
     */
    public function detachRoles($roles)
    {
        if (!(is_array($roles) || $roles instanceof Collection)) {
            throw new Exception('Invalid roles provided to detach.');
        }

        DB::transaction(function () use ($roles) {
            foreach ($roles as $role) {
                $this->detachRole($role);
            }
        });
    }

    /**
     * Detach all roles from the user.
     */
    public function detachAllRoles()
    {
        $this->roles()->detach();

        $this->clearCache();
    }

    /**
     * Resolve the "id" of the role given its id/name/Model.
     *
     * @param integer|string|Model $role
     * @return integer
     * @throws Exception
     */
    protected function getRoleId($role)
    {
        if (!$role) {
            throw new Exception('No role provided.');
        }

        if (is_string($role) && !($role = Role::whereSlug($role)->first())) {
            throw new Exception('Invalid role slug.');
        }

        if ($role instanceof Model) {
            $role = $role->getKey();
        }

        if (!is_numeric($role)) {
            throw new Exception('Invalid role id.');
        }

        return $role;
    }
}-e 

========== app/Models/Traits/AutoSetIP.php ==========
<?php

namespace App\Models\Traits;

use Illuminate\Database\Eloquent\Model;

/**
 * Trait to auto set the IP Address when creating a model object.
 * Override the default 'ip' attribute name with the 'ipAttributeName' property.
 *
 * @package App\Models\Traits
 */
trait AutoSetIP
{
    /**
     * Binds creating event to auto insert the request IP address.
     *
     * @return void
     */
    public static function bootAutoSetIP()
    {
        static::creating(function (Model $model) {
            $model->setAttribute($model->ipAttributeName ?? 'ip', ip());
        });
    }
}
-e 

========== app/Models/Country.php ==========
<?php

namespace App\Models;

use App\Base\Slug\HasSlug;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class Country extends Model
{
    use HasActive;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'countries';

    /**
     * Indicates if the model should be timestamped.
     *
     * @var bool
     */
    public $timestamps = false;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name',
        'dial_code',
        'code',
        'active',
        'flag',
        'currency_name',
        'currency_code',
        'currency_symbol'
    ];

    /**
     * The attributes that can be used for sorting with query string filtering.
     *
     * @var array
     */
    public $sortable = [
        'name',
    ];

    /**
    * Get the Flag's full file path.
    *
    * @param string $value
    * @return string
    */
    public function getFlagAttribute($value)
    {
       if (empty($value)) {
            return null;
        }
        return Storage::disk('public')->url(file_path($this->uploadPath(), $value));
    }

    /**
     * The default file upload path.
     *
     * @return string|null
     */
    public function uploadPath()
    {
        return config('base.country.upload.flag.path');
    }

    /**
     * Get all the countries from the JSON file.
     *
     * @return array
     */
    public static function allJSON()
    {
        $route = dirname(dirname(__FILE__)) . '/Helpers/Countries/countries.json';
        return json_decode(file_get_contents($route), true);
    }
    public function onboarding()
    {
        return $this->hasOne(\App\Models\Admin\Onboarding::class, 'country_code', 'code');
    }
}
-e 

========== app/Models/City.php ==========
<?php

namespace App\Models;

use App\Base\Slug\HasSlug;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;

class City extends Model
{
    use HasActive, HasSlug, UuidModel;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'cities';

    /**
     * Indicates if the model should be timestamped.
     *
     * @var bool
     */
    public $timestamps = false;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'slug', 'name', 'alias', 'display_order', 'active', 'state_id',
    ];

    /**
     * The attributes that can be used for sorting with query string filtering.
     *
     * @var array
     */
    public $sortable = [
        'name', 'display_order',
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'state',
    ];

    /**
     * The state that the city belongs to.
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function state()
    {
        return $this->belongsTo(State::class, 'state_id', 'id')->withDefault();
    }

    /**
     * Get the attribute name to slugify.
     *
     * @return string
     */
    public function getSlugSourceColumn()
    {
        return 'name';
    }
}
-e 

========== app/Models/Payment/CardInfo.php ==========
<?php

namespace App\Models\Payment;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class CardInfo extends Model
{
    use UuidModel,SoftDeletes;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'card_info';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'customer_id', 'merchant_id', 'card_token', 'last_number', 'card_type', 'user_id', 'is_default','user_role','valid_through'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];
}
-e 

========== app/Models/Payment/OwnerWalletHistory.php ==========
<?php

namespace App\Models\Payment;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;
use App\Models\Admin\Owner;

class OwnerWalletHistory extends Model
{
    use UuidModel;

    protected $fillable = ['user_id', 'card_id', 'transaction_id', 'amount','conversion','merchant','admin_id','request_id','remarks','is_credit'];

    public function ownerDetail()
    {
        return $this->belongsTo(Owner::class, 'user_id', 'id');
    }


    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }


}
-e 

========== app/Models/Payment/DriverWallet.php ==========
<?php

namespace App\Models\Payment;

use App\Base\Uuid\UuidModel;
use App\Models\Admin\Driver;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;

class DriverWallet extends Model
{
    use UuidModel;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'driver_wallet';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [ 'user_id', 'amount_added', 'amount_balance', 'amount_spent'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

    /**
    * The user wallet that the user_id belongs to.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function driver()
    {
        return $this->belongsTo(Driver::class, 'user_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/Payment/UserBankInfo.php ==========
<?php

namespace App\Models\Payment;

use Carbon\Carbon;
use App\Models\User;
use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;

class UserBankInfo extends Model
{
    use UuidModel;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'users_bank_info';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'user_id', 'account_name', 'account_no', 'bank_code','bank_name'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [

    ];

    /**
    * The user wallet that the user_id belongs to.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/Payment/WalletWithdrawalRequest.php ==========
<?php

namespace App\Models\Payment;

use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;
use App\Models\Admin\Driver;
use App\Models\User;
use App\Models\Admin\Owner;

class WalletWithdrawalRequest extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'wallet_withdrawal_requests';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'user_id', 'driver_id', 'requested_amount', 'status','requested_currency','owner_id'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

        /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [

    ];
     /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    public function driverDetail()
    {
        return $this->belongsTo(Driver::class, 'driver_id', 'id');
    }

    public function userDetail()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    public function ownerDetail()
    {
        return $this->belongsTo(Owner::class, 'user_id', 'id');
    }

}
-e 

========== app/Models/Payment/DriverSubscription.php ==========
<?php

namespace App\Models\Payment;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;

class DriverSubscription extends Model
{
    use UuidModel;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'driver_subscriptions';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'driver_id', 'subscription_type', 'active', 'paid_amount', 'expired_at','transaction_id'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [
        'converted_expired_at'
    ];

    
}
-e 

========== app/Models/Payment/UserWallet.php ==========
<?php

namespace App\Models\Payment;

use Carbon\Carbon;
use App\Models\User;
use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;

class UserWallet extends Model
{
    use UuidModel;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'user_wallet';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'user_id', 'amount_added', 'amount_balance', 'amount_spent'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [

    ];

    /**
    * The user wallet that the user_id belongs to.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/Payment/OwnerWallet.php ==========
<?php

namespace App\Models\Payment;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;
use App\Models\Admin\Owner;

class OwnerWallet extends Model
{
    use UuidModel;

    protected $fillable = [ 'user_id', 'amount_added', 'amount_balance', 'amount_spent'];

    public function owner()
    {
        return $this->belongsTo(Owner::class, 'user_id', 'id');
    }



    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    
}
-e 

========== app/Models/Payment/DriverWalletHistory.php ==========
<?php

namespace App\Models\Payment;

use App\Base\Uuid\UuidModel;
use App\Models\Admin\Driver;
use App\Models\Request\Request;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;

class DriverWalletHistory extends Model
{
    use UuidModel;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'driver_wallet_history';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['user_id', 'card_id', 'transaction_id','refferal_code' ,'amount','conversion','merchant','admin_id','request_id','remarks','is_credit', 'reffered_user' ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

    /**
    * The user wallet that the user_id belongs to.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function driver()
    {
        return $this->belongsTo(Driver::class, 'user_id', 'id');
    }

     public function requestDetail()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    
}
-e 

========== app/Models/Payment/UserWalletHistory.php ==========
<?php

namespace App\Models\Payment;

use Carbon\Carbon;
use App\Models\User;
use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;

class UserWalletHistory extends Model
{
    use UuidModel;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'user_wallet_history';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'user_id', 'card_id', 'transaction_id',  'refferal_code', 'amount','conversion','merchant','admin_id','request_id','remarks','is_credit', 'reffered_user'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];
    /**
     * The attributes that can be used for sorting with query string filtering.
     *
     * @var array
     */
    public $sortable = [
        'created_at',
    ];
    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [

    ];
    /**
    * The user wallet that the user_id belongs to.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/DummyTableForTesting.php ==========
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Grimzy\LaravelMysqlSpatial\Eloquent\SpatialTrait;

class DummyTableForTesting extends Model
{
    use SpatialTrait;

    protected $table='testing_table';

    protected $fillable = [
        'route_coordinates'
    ];


    protected $spatialFields = [
        'route_coordinates',
    ];

}
-e 

========== app/Models/Admin/VehicleType.php ==========
<?php

namespace App\Models\Admin;

use Storage;
use Carbon\Carbon;
use App\Models\User;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\Traits\DeleteOldFiles;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\SoftDeletes;
use Nicolaslopezj\Searchable\SearchableTrait;

class VehicleType extends Model
{
    use HasActive, UuidModel,DeleteOldFiles,SoftDeletes,SearchableTrait,HasActiveCompanyKey;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'vehicle_types';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
         'name', 'icon', 'capacity','is_accept_share_ride','active','company_key','description','supported_vehicles','short_description','size','is_taxi', 'icon_types_for','trip_dispatch_type'
    ];

    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = [

    ];

    /**
     * The attributes that have files that should be auto deleted on updating or deleting.
     *
     * @var array
     */
    public $deletableFiles = [
        'icon'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

    /**
     * Searchable rules.
     *
     * @var array
     */
    protected $searchable = [
        /**
         * Columns and their priority in search results.
         * Columns with higher values are more important.
         * Columns with equal values have equal importance.
         *
         * @var array
         */
        'columns' => [
            'vehicle_types.name' => 20,
        ],


    ];

    /**
     * The admin that the uploaded image belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function serviceLocation()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }

    /**
     * Get the Profile image full file path.
     *
     * @param string $value
     * @return string
     */
    public function getIconAttribute($value)
    {
        if (empty($value)) {
            return null;
        }

        // return asset(file_path('storage/'.$this->uploadPath(), $value));

        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $value));
    }

    /**
     * The default file upload path.
     *
     * @return string|null
     */
    public function uploadPath()
    {
        // if (!$this->serviceLocation()->exists()) {
        //     return null;
        // }

        // return folder_merge(config('base.types.upload.images.path'), $this->service_location_id);
        return config('base.types.upload.images.path');
    }

    /**
     * The Zone has many Types.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasMany
     */
    public function zoneType()
    {
        return $this->hasMany(ZoneType::class, 'type_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/Admin/OfferDriver.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class OfferDriver extends Model
{
    use HasFactory, UuidModel;

    protected $fillable = [
        'offer_id',
        'driver_id',
        'count'
    ];


    public function offer() {
        return $this->belongsTo(offer::class, 'offer_id');
    }


    public function driver() {
        return $this->belongsTo(Driver::class, 'driver_id');
    }
}
-e 

========== app/Models/Admin/Fleet.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Master\CarMake;
use App\Models\Master\CarModel;
use App\Models\Traits\HasActive;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Fleet extends Model
{
    use UuidModel,SoftDeletes,HasActive;

    protected $fillable = [
        'owner_id','brand','model','license_number','permission_number','vehicle_type','active','fleet_id','qr_image','approve','car_color','driver_id','custom_make','custom_model'
    ];

    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [
       'car_make_name','car_model_name'
    ];

    public function vehicleType(){
        return $this->belongsTo(VehicleType::class,'vehicle_type','id');
    }

    public function carBrand(){
        return $this->belongsTo(CarMake::class,'brand','id');
    }

    public function carModel(){
        return $this->belongsTo(CarModel::class,'model','id');
    }

    public function fleetDocument(){
        return $this->hasMany(FleetDocument::class,'fleet_id','id');
    }

    public function getQrCodeImageAttribute(){
        return asset('storage/uploads/qr-codes/'.$this->qr_image);
    }

    public function user(){
        return $this->belongsTo(User::class,'owner_id','id');
    }


    public function getCarMakeNameAttribute()
    {
        if($this->carBrand()->exists()){
            return $this->carBrand?$this->carBrand->name:null;            
        }else{

            return $this->custom_make;
        }
    }
    public function getCarModelNameAttribute()
    {
        if($this->carModel()->exists()){
            return $this->carModel?$this->carModel->name:null;
        }else{
            return $this->custom_model;
        }
    }

    public function getFleetNameAttribute(){
        return  $this->carBrand->name .' - '. $this->carModel->name .' ('.$this->vehicleType->name.')';
    }

    public function driverDetail(){
        return $this->belongsTo(Driver::class,'id','fleet_id');
    }

    public function ownerDetail(){
        return $this->belongsTo(Owner::class,'owner_id','id');
    }
}
-e 

========== app/Models/Admin/PromoUser.php ==========
<?php

namespace App\Models\Admin;

use App\Models\Admin\Promo;
use App\Models\Request\Request;
use Illuminate\Database\Eloquent\Model;

class PromoUser extends Model
{

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'promo_users';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['promo_code_id','user_id','request_id', 'time_left'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'promo','request'
    ];

    public function promo()
    {
        return $this->belongsTo(Promo::class, 'promo_code_id', 'id');
    }
    public function request()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    }
}
-e 

========== app/Models/Admin/FleetNeededDocument.php ==========
<?php

namespace App\Models\Admin;

use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;

class FleetNeededDocument extends Model
{
    use HasActive;

    protected $table = 'fleet_needed_documents';

    protected $fillable = [
        'name', 'doc_type', 'has_identify_number','has_expiry_date','active','identify_number_locale_key'
    ];

    public function fleetDocument()
    {
        return $this->hasOne(FleetDocument::class, 'document_id', 'id');
    }
}
-e 

========== app/Models/Admin/PromoCodeUser.php ==========
<?php

namespace App\Models\Admin;

use App\Models\Admin\Promo;
use App\Models\Request\Request;
use Illuminate\Database\Eloquent\Model;
use App\Models\User;


class PromoCodeUser extends Model
{


    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'promo_code_users';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['promo_code_id','user_id','service_location_id'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'promo'
    ];

    public function promo()
    {
        return $this->belongsTo(Promo::class, 'promo_code_id', 'id');
    }
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }
}
-e 

========== app/Models/Admin/DriverDocument.php ==========
<?php

namespace App\Models\Admin;

use Carbon\Carbon;
use App\Base\Uuid\UuidModel;
use App\Models\Admin\Driver;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;
use Illuminate\Database\Eloquent\SoftDeletes;

class DriverDocument extends Model
{
    use HasActive, UuidModel,SoftDeletes;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'driver_documents';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'driver_id', 'document_id', 'image','identify_number','expiry_date','document_status','comment'
    ];
    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [
        'document_name','identify_number_key'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'driver'
    ];

    /**
     * The driver that the uploaded image belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function driver()
    {
        return $this->belongsTo(Driver::class, 'driver_id', 'id');
    }
    /**
     * Get the Document's full file path.
     *
     * @param string $value
     * @return string
     */
    public function getImageAttribute($value)
    {
        if (empty($value)) {
            return null;
        }
        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $value));
    }
    /**
    * Get the Document's name.
    *
    * @param string $value
    * @return string
    */
    public function getDocumentNameAttribute()
    {
        if (!$this->driverNeededDocuments()->exists()) {
            return null;
        }
        return $this->driverNeededDocuments->name;
    }
    /**
    * Get the is_identify_number_exists.
    *
    * @param string $value
    * @return string
    */
    public function getIdentifyNumberKeyAttribute()
    {
        if (!$this->driverNeededDocuments()->exists()) {
            return null;
        }
        return $this->driverNeededDocuments->identify_number_locale_key;
    }
    /**
    * The Document that the DriverNeededDocuments belongs to.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function driverNeededDocuments()
    {
        return $this->belongsTo(DriverNeededDocument::class, 'document_id', 'id');
    }

    /**
     * The default file upload path.
     *
     * @return string|null
     */
    public function uploadPath()
    {
        if (!$this->driver()->exists()) {
            return null;
        }
        return folder_merge(config('base.driver.upload.documents.path'), $this->driver->id);
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        if(auth()->user()->exists()){
            $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        }else{
            $timezone = env('SYSTEM_DEFAULT_TIMEZONE');
        }
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
       if(auth()->user()->exists()){
            $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        }else{
            $timezone = env('SYSTEM_DEFAULT_TIMEZONE');
        }
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    public function getExpiryDateAttribute($value)
    {
        if ($value==null) {
            return null;
        }
        // if(auth()->user()->exists()){
        //     $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        // }else{
        //     $timezone = env('SYSTEM_DEFAULT_TIMEZONE');
        // }

            $timezone = env('SYSTEM_DEFAULT_TIMEZONE');

        return Carbon::parse($value)->setTimezone($timezone)->format('Y-m-d');
    }
}
-e 

========== app/Models/Admin/DriverNeededDocument.php ==========
<?php

namespace App\Models\Admin;

use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;

class DriverNeededDocument extends Model
{
    use HasActive;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'driver_needed_documents';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'doc_type', 'has_identify_number','has_expiry_date','active','identify_number_locale_key','account_type',
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'driverDocument'
    ];

    /**
     * The Driver Document associated with the driver needed document's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function driverDocument()
    {
        return $this->hasOne(DriverDocument::class, 'document_id', 'id');
    }
}
-e 

========== app/Models/Admin/Owner.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Nicolaslopezj\Searchable\SearchableTrait;
use App\Models\Payment\OwnerWallet;
use App\Models\Payment\OwnerWalletHistory;
use Carbon\Carbon;
use config;

class Owner extends Model
{
    use HasActive,UuidModel,SoftDeletes,SearchableTrait;

     protected $table = 'owners';

    protected $fillable = [
        'user_id','service_location_id','company_name','owner_name','name','surname','mobile','phone','email','password','address','postal_code','city','expiry_date','no_of_vehicles','tax_number','bank_name','ifsc','account_no','active','approve','transport_type'
    ];
    

    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    public function ownerDocument()
    {
        return $this->hasMany(OwnerDocument::class, 'owner_id', 'id');
    }

    public function area(){
        return $this->belongsTo(ServiceLocation::class,'service_location_id','id');
    }

    /**
     * Searchable rules.
     *
     * @var array
     */
    protected $searchable = [
        /**
         * Columns and their priority in search results.
         * Columns with higher values are more important.
         * Columns with equal values have equal importance.
         *
         * @var array
         */
        'columns' => [
            'owners.company_name' => 20,
            'owners.owner_name' => 20,
            'owners.name' => 20,
            'owners.email' => 20,
            'owners.mobile' => 20,
        ],
    ];

    public function ownerWalletDetail()
    {
        return $this->hasOne(OwnerWallet::class, 'user_id', 'id');
    }

    public function ownerWalletHistoryDetail()
    {
        return $this->hasMany(OwnerWalletHistory::class, 'user_id', 'id');
    }

}
-e 

========== app/Models/Admin/Offer.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Offer extends Model
{
    use HasFactory, UuidModel, HasActive;

    protected $fillable = [
        'service_location_id',
        'subject',
        'request_number',
        'earning_price',
        'user_type',
        'from_date',
        'to_date',
        'active'
    ];


    protected $hidden = [
        'user_type',
        'created_at',
        'updated_at'
    ];


    public function offer_drivers()
    {
        return $this->hasMany(OfferDriver::class, 'offer_id');
    }

    public function offer_driver()
    {
        return $this->hasOne(OfferDriver::class, 'offer_id');
        // ->orderBy('created_at', 'asc');
    }
}
-e 

========== app/Models/Admin/OwnerDocument.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Storage;

class OwnerDocument extends Model
{
    use HasActive, UuidModel,SoftDeletes;

    protected $table = 'owner_documents';

    protected $fillable = [
        'owner_id', 'document_id', 'image','identify_number','expiry_date','document_status','comment'
    ];

    public function owner()
    {
        return $this->belongsTo(Owner::class, 'owner_id', 'id');
    }

    public function ownerNeededDocuments()
    {
        return $this->belongsTo(OwnerNeededDocument::class, 'document_id', 'id');
    }

    public function getImageAttribute($value)
    {
        if (empty($value)) {
            return null;
        }
        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $value));
    }

    public function uploadPath()
    {
        if (!$this->owner()->exists()) {
            return null;
        }
        return folder_merge(config('base.owner.upload.documents.path'), $this->owner->id);
    }

    public function getExpiryDateAttribute($value)
    {
        if ($value==null) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($value)->setTimezone($timezone)->format('Y-m-d');
    }
}
-e 

========== app/Models/Admin/ZoneType.php ==========
<?php

namespace App\Models\Admin;

use Carbon\Carbon;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Models\Admin\DriverVehicleType;

class ZoneType extends Model
{
    use HasActive, UuidModel,SoftDeletes;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'zone_types';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'zone_id', 'type_id','payment_type','active','bill_status','admin_commision_type','admin_commision','service_tax','transport_type'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'zone','vehicleType'
    ];

    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [
        'vehicle_type_name','icon'
    ];
    /**
     * The zone type that belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function zone()
    {
        return $this->belongsTo(Zone::class, 'zone_id', 'id');
    }

   

    /**
    * Get vehicle type's name.
    *
    * @return string
    */
    public function getVehicleTypeNameAttribute()
    {
        if (!$this->vehicleType()->exists()) {
            return null;
        }
        return $this->vehicleType->name;
    }
    /**
    * Get vehicle type's icon.
    *
    * @return string
    */
    public function getIconAttribute()
    {
        if (!$this->vehicleType()->exists()) {
            return null;
        }
        return $this->vehicleType->icon;
    }

    /**
     * The zone type that belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function vehicleType()
    {
        return $this->belongsTo(VehicleType::class, 'type_id', 'id');
    }

    /**
     * The zone type that belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function driverVehicleType()
    {
        return $this->belongsTo(DriverVehicleType::class, 'type_id', 'vehicle_type');
    }
    public function zoneTypePrice()
    {
        return $this->hasMany(ZoneTypePrice::class, 'zone_type_id', 'id');
    }

     public function zoneTypePackage()
    {
        return $this->hasMany(ZoneTypePackagePrice::class, 'zone_type_id', 'id');
    }

    public function PackageName()
    {
        return $this->hasOne(PackageType::class, 'id','package_type_id');
    }
}
-e 

========== app/Models/Admin/FleetDocument.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Storage;

class FleetDocument extends Model
{
    use UuidModel,SoftDeletes,HasActive;

    protected $fillable = [
        'fleet_id','name','image','expiry_date','document_id','document_status','comment','identify_number'
    ];

    public function fleet(){
        return $this->belongsTo(Fleet::class,'fleet_id','id');
    }

    public function getImageAttribute($value){

        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $value));
    }
    
    public function uploadPath()
    {
        if (!$this->fleet()->exists()) {
            return null;
        }

        return folder_merge(config('base.fleets.upload.images.path'), $this->fleet->id);
    }
}
-e 

========== app/Models/Admin/DriverVehicleType.php ==========
<?php

namespace App\Models\Admin;

use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;
use App\Models\Admin\VehicleType;
class DriverVehicleType extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'driver_vehicle_types';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['driver_id','vehicle_type'];


    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'driver'
    ];

    /**
    * The driver that the uploaded data belongs to.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function driverDetail()
    {
        return $this->belongsTo(Driver::class, 'driver_id', 'id');
    }
    public function vehicleType()
    {
        return $this->belongsTo(VehicleType::class, 'vehicle_type', 'id');
    }
   
}
-e 

========== app/Models/Admin/OwnerHiredDriver.php ==========
<?php

namespace App\Models\Admin;

use Illuminate\Database\Eloquent\Model;

class OwnerHiredDriver extends Model
{
    protected $fillable = ['owner_id','driver_id'];
}
-e 

========== app/Models/Admin/UserDriverNotification.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;

class UserDriverNotification extends Model
{
    use UuidModel;

    protected $fillable = [
        'notify_id','user_id','driver_id','is_read','read_at','push_enum','title','body','image','data'
    ];
}
-e 

========== app/Models/Admin/ZoneSurgeDay.php ==========
<?php

namespace App\Models\Admin;

use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Models\Admin\ZoneSurgePrice;

class ZoneSurgeDay extends Model
{
    use HasActive;
    
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'zone_surge_days';

    protected $fillable = [
        'zone_surge_price_id','week_day'
    ];


    public function zoneSurgePrice()
    {
        return $this->belongsTo(ZoneSurgePrice::class, 'zone_surge_price_id', 'id');
    } 

}
-e 

========== app/Models/Admin/DriverAvailability.php ==========
<?php

namespace App\Models\Admin;

use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;

class DriverAvailability extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'driver_availabilities';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['driver_id','is_online','online_at','offline_at','duration'];


    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'driver'
    ];

    /**
    * The driver that the uploaded data belongs to.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function driver()
    {
        return $this->belongsTo(Driver::class, 'driver_id', 'id');
    }

    public function getConvertedOnlineAtAttribute()
    {
        if ($this->online_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->online_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    public function getConvertedOfflineAtAttribute()
    {
        if ($this->offline_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->offline_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    public function getConvertedDurationAtAttribute()
    {
        $hours =intdiv($this->duration,60). 'hr'." ".($this->duration % 60)."mins";
        

        return $hours;
    }
}
-e 

========== app/Models/Admin/ComplaintTitle.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;

class ComplaintTitle extends Model
{
    use HasActive,UuidModel,HasActiveCompanyKey;

    protected $fillable = [
        'user_type','title','complaint_type','active','company_key',
    ];
}
-e 

========== app/Models/Admin/Driver.php ==========
<?php

namespace App\Models\Admin;

use Carbon\Carbon;
use App\Models\User;
use App\Models\Country;
use App\Models\Master\CarMake;
use App\Models\Master\CarModel;
use App\Models\Request\Request;
use App\Models\Traits\HasActive;
use App\Models\Payment\DriverWallet;
use Illuminate\Database\Eloquent\Model;
use App\Models\Admin\DriverAvailability;
use App\Models\Payment\DriverWalletHistory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Nicolaslopezj\Searchable\SearchableTrait;
use App\Models\Payment\WalletWithdrawalRequest;
use App\Models\Payment\DriverSubscription;
use App\Models\Request\DriverRejectedRequest;
use Grimzy\LaravelMysqlSpatial\Eloquent\SpatialTrait;
use Config;

class Driver extends Model
{
    use HasActive, SoftDeletes, SearchableTrait, SpatialTrait;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'drivers';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'user_id',
        'owner_id',
        'service_location_id',
        'name',
        'mobile',
        'email',
        'address',
        'state',
        'city',
        'country',
        'postal_code',
        'gender',
        'vehicle_type',
        'car_make',
        'car_model',
        'car_color',
        'car_number',
        'today_trip_count',
        'total_accept',
        'total_reject',
        'acceptance_ratio',
        'last_trip_date',
        'active',
        'approve',
        'available',
        'reason',
        'uuid',
        'fleet_id',
        'vehicle_year',
        'route_coordinates',
        'my_route_address',
        'my_route_lat',
        'my_route_lng',
        'enable_my_route_booking',
        'custom_make',
        'custom_model',
        'transport_type',
        'identityNumber',
        'sequenceNumber',
        'dateOfBirthGregorian',
        'dateOfBirthHijri',
        'carNumber',
        'range_rides'
    ];

    protected $casts = [
        'range_rides' => 'integer'
    ];

    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = [
        'profile_picture',
        'vehicle_type_name',
        'car_make_name',
        'car_model_name',
        'rating',
        'no_of_ratings',
        'timezone',
        'vehicle_type_image',
        'vehicle_type_icon_for'
    ];


    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'driverDetail',
        'requestDetail'
    ];

    protected $spatialFields = [
        'route_coordinates',
    ];
    /**
     * Searchable rules.
     *
     * @var array
     */
    protected $searchable = [
        /**
         * Columns and their priority in search results.
         * Columns with higher values are more important.
         * Columns with equal values have equal importance.
         *
         * @var array
         */
        'columns' => [
            'drivers.name' => 20,
            'drivers.email' => 20,
            'drivers.mobile' => 20,
        ],

    ];

    /**
     * Get the Profile image full file path.
     *
     * @param string $value
     * @return string
     */
    public function getProfilePictureAttribute()
    {
        return $this->user->profile_picture;
    }

    public function getTimezoneAttribute()
    {
        return $this->user->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
    }

    public function getVehicleTypeNameAttribute()
    {
        return $this->vehicleType ? $this->vehicleType->name : null;
    }
    public function getVehicleTypeImageAttribute()
    {
        return $this->vehicleType ? $this->vehicleType->icon : null;
    }
    public function getVehicleTypeIconForAttribute()
    {
        return $this->vehicleType ? $this->vehicleType->icon_types_for : 'taxi';
    }
    public function getCarMakeNameAttribute()
    {
        if ($this->carMake()->exists()) {
            return $this->carMake ? $this->carMake->name : null;
        } else {

            return $this->custom_make;
        }
    }
    public function getCarModelNameAttribute()
    {
        if ($this->carModel()->exists()) {
            return $this->carModel ? $this->carModel->name : null;
        } else {
            return $this->custom_model;
        }
    }
    public function getRatingAttribute()
    {
        return $this->user->rating;
    }
    public function getNoOfRatingsAttribute()
    {
        return $this->user->no_of_ratings;
    }
    public function requestDetail()
    {
        return $this->hasMany(Request::class, 'driver_id', 'id');
    }
    public function rejectedRequestDetail()
    {
        return $this->hasMany(DriverRejectedRequest::class, 'driver_id', 'id');
    }
    public function subscriptions()
    {
        return $this->hasMany(DriverSubscription::class, 'driver_id', 'id');
    }

    public function currentRide()
    {

        return $this->requestDetail()->where('is_completed', false)->where('is_cancelled', false)->exists();
    }
    public function driverAvailabilities()
    {
        return $this->hasMany(DriverAvailability::class, 'driver_id', 'id');
    }

    public function driverVehicleTypeDetail()
    {
        return $this->hasMany(DriverVehicleType::class, 'driver_id', 'id');
    }
    /**
     * The driver that the user_id belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }
    public function serviceLocation()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }
    public function owner()
    {
        return $this->belongsTo(Owner::class, 'owner_id', 'id');
    }

    public function carMake()
    {
        return $this->belongsTo(CarMake::class, 'car_make', 'id');
    }

    public function fleetDetail()
    {
        return $this->belongsTo(Fleet::class, 'fleet_id', 'id');
    }

    public function carModel()
    {
        return $this->belongsTo(CarModel::class, 'car_model', 'id');
    }

    /**
     * The driver associated with the user's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function driverDetail()
    {
        return $this->hasOne(DriverDetail::class, 'driver_id', 'id');
    }

    /**
     * The driver document associated with the user's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function driverDocument()
    {
        return $this->hasMany(DriverDocument::class, 'driver_id', 'id');
    }
    /**
     * The driver wallet history associated with the driver's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function driverWalletHistory()
    {
        return $this->hasMany(DriverWalletHistory::class, 'user_id', 'id');
    }

    public function driverWallet()
    {
        return $this->hasOne(DriverWallet::class, 'user_id', 'id');
    }
    public function driverPaymentWalletHistory()
    {
        return $this->hasMany(DriverWalletHistory::class, 'driver_id', 'id');
    }

    public function withdrawalRequestsHistory()
    {
        return $this->hasMany(WalletWithdrawalRequest::class, 'driver_id', 'id');
    }

    public function driverPaymentWallet()
    {
        return $this->hasOne(DriverWallet::class, 'driver_id', 'id');
    }
    public function vehicleType()
    {
        return $this->hasOne(VehicleType::class, 'id', 'vehicle_type');
    }

    /**
     * Get formated and converted timezone of user's created at.
     *
     * @param string $value
     * @return string
     */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at == null || !auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
     * Get formated and converted timezone of user's created at.
     *
     * @param string $value
     * @return string
     */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at == null || !auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    public function privilegedVehicle()
    {
        return $this->hasMany(DriverPrivilegedVehicle::class, 'driver_id', 'id');
    }

    public function rating($user_id)
    {
        $rate =  User::where('id', $user_id)->first();
        return $rate?->rating ?? 0;
    }

    public function enabledRoutes()
    {
        return $this->hasMany(DriverEnabledRoutes::class, 'driver_id', 'id');
    }

    /**
     * The driver that the country belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function countryDetail()
    {
        return $this->belongsTo(Country::class, 'country', 'id');
    }
}
-e 

========== app/Models/Admin/OwnerNeededDocument.php ==========
<?php

namespace App\Models\Admin;

use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;

class OwnerNeededDocument extends Model
{
    use HasActive;

    protected $table = 'owner_needed_documents';

    protected $fillable = [
        'name', 'doc_type', 'has_identify_number','has_expiry_date','active','identify_number_locale_key'
    ];

    public function ownerDocument()
    {
        return $this->hasOne(OwnerDocument::class, 'document_id', 'id');
    }
}
-e 

========== app/Models/Admin/Company.php ==========
<?php

namespace App\Models\Admin;

use Carbon\Carbon;
use App\Models\User;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\Traits\DeleteOldFiles;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Company extends Model
{
    use HasActive, UuidModel,DeleteOldFiles,SoftDeletes;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'companies';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'admin_id', 'name', 'icon', 'owner_name','vat_number','active','mobile','landline','email','address','postal_code','state','city','country'
    ];

    /**
     * The attributes that have files that should be auto deleted on updating or deleting.
     *
     * @var array
     */
    public $deletableFiles = [
        'icon'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'admin'
    ];

    /**
     * The admin that the uploaded image belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function admin()
    {
        return $this->belongsTo(User::class, 'admin_id', 'id');
    }

    /**
     * The default file upload path.
     *
     * @return string|null
     */
    public function uploadPath()
    {
        if (!$this->admin()->exists()) {
            return null;
        }

        return folder_merge(config('base.company.upload.images.path'), $this->admin->id);
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/Admin/Complaint.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Nicolaslopezj\Searchable\SearchableTrait;

class Complaint extends Model
{
    use HasActive,UuidModel,SearchableTrait;

    protected $fillable = [
    'user_type','user_id','request_id','complaint_type','complaint_title_id','description','status','driver_id','transport_type'
    ];

    /**
     * Searchable rules.
     *
     * @var array
     */
    protected $searchable = [
        /**
         * Columns and their priority in search results.
         * Columns with higher values are more important.
         * Columns with equal values have equal importance.
         *
         * @var array
         */
        'columns' => [
            'complaints.user_type' => 20,
        ],

    ];

    public function complaint(){
        return $this->belongsTo(ComplaintTitle::class,'complaint_title_id','id');
    }

    public function user(){
        return $this->belongsTo(User::class,'user_id','id');
    } 
    public function driver(){
        return $this->belongsTo(Driver::class,'driver_id','id');
    }
    public function owner(){
        return $this->belongsTo(Owner::class,'owner_id','id');
    }
}
-e 

========== app/Models/Admin/Onboarding.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\Admin\ServiceLocation;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Storage;




class Onboarding extends Model
{
    use UuidModel,HasActive,HasActiveCompanyKey;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'onboarding_screen';


    /**
     * Indicates if the IDs are auto-incrementing.
     *
     * @var bool
     */
    public $incrementing = false;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'sn_o',
        'screen',
        'title',
        'order',
        'onboarding_image',
        'description',
        'active',
    ];



    public function uploadPath()
    {
        // return config('base.onboarding.upload.path');
         return config('base.onboarding.upload.path');

    }
    public function country()
    {
        return $this->belongsTo(\App\Models\Country::class, 'country_code', 'code');
    }
}
-e 

========== app/Models/Admin/TripRequest.php ==========
<?php

namespace App\Models\Admin;

use App\Models\Admin\ServiceLocation;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\SoftDeletes;
use Nicolaslopezj\Searchable\SearchableTrait;


class TripRequest extends Model
{
    use HasActive, UuidModel,SoftDeletes,SearchableTrait,HasActiveCompanyKey;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'trip_request';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'service_location_id','name','number','active','user_type','created_by','company_key'
    ];

    /**
     * Get formated and converted timezone of user's created at.
     *
     * @param string $value
     * @return string
     */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
     * Get formated and converted timezone of user's created at.
     *
     * @param string $value
     * @return string
     */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    protected $searchable = [
        'columns' => [
            'trip_request.name' => 20,
            'trip_request.number'=> 20,
            'service_locations.name'=> 20,
        ],
        'joins' => [
            'service_locations' => ['trip_request.service_location_id','service_locations.id'],
        ],
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'serviceLocation','serviceLocation.zones'
    ];

    public function serviceLocation()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }
}
-e 

========== app/Models/Admin/Airport.php ==========
<?php

namespace App\Models\Admin;

use Carbon\Carbon;
use App\Models\User;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;
use Nicolaslopezj\Searchable\SearchableTrait;
use Grimzy\LaravelMysqlSpatial\Eloquent\SpatialTrait;

class Airport extends Model
{
    use HasActive, UuidModel,SearchableTrait,HasActiveCompanyKey;
    use SpatialTrait;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'airports';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'service_location_id', 'name','active','coordinates','company_key','lat','lng','airport_surge_fee'
    ];

    protected $spatialFields = [
        'coordinates'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'admin'
    ];

    
    public function serviceLocation()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    protected $searchable = [
        'columns' => [
            'zones.name' => 20,
            'service_locations.name'=> 20,
        ],
        'joins' => [
            'service_locations' => ['zones.service_location_id','service_locations.id'],
        ],
    ];
}
-e 

========== app/Models/Admin/ZoneSurgePrice.php ==========
<?php

namespace App\Models\Admin;

use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class ZoneSurgePrice extends Model
{
    use HasActive;
    
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'zone_surge_prices';

    protected $fillable = [
        'zone_id','start_time','end_time','value','day'
    ];

    public function getFromAttribute(){
        return now()->parse($this->start_time)->format('h:i a');
    }

    public function getToAttribute(){
        return now()->parse($this->end_time)->format('h:i a');
    }
}
-e 

========== app/Models/Admin/UserDetails.php ==========
<?php

namespace App\Models\Admin;

use Illuminate\Database\Eloquent\Model;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\User;
use Illuminate\Database\Eloquent\SoftDeletes;
use Nicolaslopezj\Searchable\SearchableTrait;

class UserDetails extends Model
{
    use HasActive, UuidModel,SoftDeletes,SearchableTrait;
	/**
	 * The table associated with the model.
	 *
	 * @var string
	 */
	protected $table = 'user_details';

	/**
	 * The attributes that are mass assignable.
	 *
	 * @var array
	 */
	protected $fillable = [
		'user_id','name','mobile','email','address','state','city','country','gender','active','currency','profile','token','token_expiry'
	];
	public function user(){
		return $this->belongsTo(User::class,'user_id','id');
	}

    protected $searchable = [
        'columns' => [
            'user_details.name' => 20,
            'user_details.mobile'=> 20,
            'user_details.email'=> 20
        ]
    ];
}
-e 

========== app/Models/Admin/Promo.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Admin\PromoUser;
use App\Models\Traits\HasActive;
use App\Models\Admin\ServiceLocation;
use Illuminate\Database\Eloquent\Model;

class Promo extends Model
{
    use UuidModel, HasActive;



    protected $table = 'promo';

    protected $fillable = [
        'code',
        'service_location_id',
        'minimum_trip_amount',
        'maximum_discount_amount',
        'discount_percent',
        'total_uses',
        'uses_per_user',
        'from',
        'to',
        'active',
        'transport_type',
        'promo_type',
        'sequential_times',
        'discount_sequential'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */


    protected $casts = [
        'discount_sequential' => 'array'
    ];

    public $includes = [
        'promoUsers',
        'serviceLocation'
    ];

    public function getFromDateAttribute()
    {
        return now()->parse($this->from)->toDateString();
    }

    public function getToDateAttribute()
    {
        return now()->parse($this->to)->toDateString();
    }
    public function serviceLocation()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }


    public function promoUsers()
    {
        return $this->hasMany(PromoUser::class, 'promo_code_id', 'id');
    }
}
-e 

========== app/Models/Admin/DriverPrivilegedVehicle.php ==========
<?php

namespace App\Models\Admin;

use Illuminate\Database\Eloquent\Model;

class DriverPrivilegedVehicle extends Model
{
    protected $fillable = ['owner_id','driver_id','fleet_id','vehicle_id'];

    public function fleet(){
        return $this->belongsTo(Fleet::class,'fleet_id','id');
    }
}
-e 

========== app/Models/Admin/ServiceLocation.php ==========
<?php

namespace App\Models\Admin;

use Carbon\Carbon;
use App\Models\Admin\Zone;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\SoftDeletes;
use Nicolaslopezj\Searchable\SearchableTrait;

class ServiceLocation extends Model
{
    use HasActive, UuidModel,SoftDeletes,SearchableTrait,HasActiveCompanyKey;

    protected $table = 'service_locations';

    protected $fillable = ['name','currency_name','currency_code','currency_symbol','country','timezone','active','company_key'];


    protected $searchable = [
        'columns' => [
            'service_locations.name' => 20,
            'service_locations.currency_name'=> 10
        ],
    ];
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    /**
    * The Servicelocation has many Zone.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\hasMany
    */
    public function zones()
    {
        return $this->hasMany(Zone::class, 'service_location_id', 'id');
    }
}
-e 

========== app/Models/Admin/DriverDetail.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Models\Admin\Driver;

class DriverDetail extends Model {
	use HasActive, UuidModel,SoftDeletes;
	/**
	 * The table associated with the model.
	 *
	 * @var string
	 */
	protected $table = 'driver_details';

	/**
	 * The attributes that are mass assignable.
	 *
	 * @var array
	 */
	protected $fillable = [
		'driver_id', 'latitude', 'longitude','bearing','is_socket_connected','current_zone','rating','rated_by','owner','is_company_driver'
	];

	

	/**
	 * The relationships that can be loaded with query string filtering includes.
	 *
	 * @var array
	 */
	public $includes = [
		'driver'
	];

	   /**
     * The driver that the uploaded data belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function driver()
    {
        return $this->belongsTo(Driver::class, 'admin_id', 'id');
    }

    
}
-e 

========== app/Models/Admin/Zone.php ==========
<?php

namespace App\Models\Admin;

use Carbon\Carbon;
use App\Models\User;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;
use Nicolaslopezj\Searchable\SearchableTrait;
use Grimzy\LaravelMysqlSpatial\Eloquent\SpatialTrait;

class Zone extends Model
{
    use HasActive, UuidModel,SearchableTrait,HasActiveCompanyKey;
    use SpatialTrait;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'zones';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'service_location_id', 'name','unit','active','coordinates','default_vehicle_type','company_key','lat','lng','default_vehicle_type_for_delivery'
    ];
    protected $spatialFields = [
        'coordinates'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'admin'
    ];

    /**
     * The admin that the uploaded image belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function admin()
    {
        return $this->belongsTo(User::class, 'admin_id', 'id');
    }

    /**
     * The Zone has many bounds.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasMany
     */
    public function zoneBound()
    {
        return $this->hasOne(ZoneBound::class, 'zone_id', 'id');
    }


    /**
     * The Zone has many Types.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasMany
     */
    public function zoneType()
    {
        return $this->hasMany(ZoneType::class, 'zone_id', 'id');
    } 
   

    public function zoneSurge()
    {
        return $this->hasMany(ZoneSurgePrice::class, 'zone_id', 'id');
    }

    public function serviceLocation()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    protected $searchable = [
        'columns' => [
            'zones.name' => 20,
            'service_locations.name'=> 20,
        ],
        'joins' => [
            'service_locations' => ['zones.service_location_id','service_locations.id'],
        ],
    ];
}
-e 

========== app/Models/Admin/Faq.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\Admin\ServiceLocation;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\SoftDeletes;

class Faq extends Model
{
    use UuidModel,HasActive,HasActiveCompanyKey;
    // ,SoftDeletes;

    protected $fillable = [
        'service_location_id','question','answer','user_type','active','company_key',
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'serviceLocation','serviceLocation.zones'
    ];

    public function serviceLocation()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }
}
-e 

========== app/Models/Admin/CancellationReason.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;

class CancellationReason extends Model
{
    use UuidModel, HasActive, HasActiveCompanyKey;

    protected $fillable = [
        'user_type',
        'payment_type',
        'arrival_status',
        'reason',
        'active',
        'company_key',
        'transport_type',
        'cancellation_type'
    ];





}
-e 

========== app/Models/Admin/DriverEnabledRoutes.php ==========
<?php

namespace App\Models\Admin;

use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use App\Models\Admin\Driver;

class DriverEnabledRoutes extends Model {
	use HasActive;
	/**
	 * The table associated with the model.
	 *
	 * @var string
	 */
	protected $table = 'driver_enabled_routes';

	/**
	 * The attributes that are mass assignable.
	 *
	 * @var array
	 */
	protected $fillable = [
		'driver_id', 'current_lat','current_lng','current_address'
	];

	

	/**
	 * The relationships that can be loaded with query string filtering includes.
	 *
	 * @var array
	 */
	public $includes = [
		'driver'
	];

	   /**
     * The driver that the uploaded data belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function driver()
    {
        return $this->belongsTo(Driver::class, 'driver_id', 'id');
    }

    
}
-e 

========== app/Models/Admin/ZoneBound.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use App\Models\User;

class ZoneBound extends Model {
	use HasActive, UuidModel;
	/**
	 * The table associated with the model.
	 *
	 * @var string
	 */
	protected $table = 'zone_bounds';

	/**
	 * The attributes that are mass assignable.
	 *
	 * @var array
	 */
	protected $fillable = [
		'zone_id', 'bound','north','east','south','west'

	];

	/**
	 * The relationships that can be loaded with query string filtering includes.
	 *
	 * @var array
	 */
	public $includes = [
		'zone'
	];

	   /**
     * The admin that the uploaded image belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function zone()
    {
        return $this->belongsTo(Zone::class, 'zone_id', 'id');
    }

}
-e 

========== app/Models/Admin/Notification.php ==========
<?php

namespace App\Models\Admin;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class Notification extends Model
{
    use UuidModel;

    protected $fillable = [
        'push_enum','title','body','image','data','for_user','for_driver'
    ];

    public function userNotification()
    {
        return $this->hasMany(UserDriverNotification::class, 'notify_id', 'id');
    }

    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [
        'push_image'
    ];

    public function getPushImageAttribute()
    {
        if (!$this->image) {
            return null;
        }
        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $this->image));
    }

    public function uploadPath()
    {
        return config('base.pushnotification.upload.images.path');
    }
}
-e 

========== app/Models/Admin/ZoneTypePrice.php ==========
<?php

namespace App\Models\Admin;

use Carbon\Carbon;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Nicolaslopezj\Searchable\SearchableTrait;

class ZoneTypePrice extends Model
{
    use HasActive, UuidModel,SoftDeletes,SearchableTrait;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'zone_type_price';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'zone_type_id','base_price','price_per_distance','waiting_charge','price_per_time','cancellation_fee','base_distance','price_type','active','free_waiting_time_in_mins_before_trip_start','free_waiting_time_in_mins_after_trip_start'
    ];

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
      /**
     * The zone type that belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function zoneType()
    {
        return $this->belongsTo(ZoneType::class, 'zone_type_id', 'id');
    } 
    protected $searchable = [
        'columns' => [
            'zones.name' => 20,
            'service_locations.name'=> 20,
            'vehicle_types.name'=> 20,
            
        ],
        'joins' => [
            'zones' =>['zone_type_price.zone_types.zones.id'],
            'vehicle_types' =>['zone_type_price.zone_types.zones.vehicle_types.id'],
            'service_locations' => ['zones.service_location_id','service_locations.id'],
        ],
    ];
    
}
-e 

========== app/Models/Admin/Sos.php ==========
<?php

namespace App\Models\Admin;

use Carbon\Carbon;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\Admin\ServiceLocation;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\SoftDeletes;
use Nicolaslopezj\Searchable\SearchableTrait;

class Sos extends Model
{
    use HasActive, UuidModel,SoftDeletes,SearchableTrait,HasActiveCompanyKey;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'sos';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'service_location_id','name','number','active','user_type','created_by','company_key'
    ];

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    protected $searchable = [
        'columns' => [
            'sos.name' => 20,
            'sos.number'=> 20,
            'service_locations.name'=> 20,
        ],
        'joins' => [
            'service_locations' => ['sos.service_location_id','service_locations.id'],
        ],
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'serviceLocation','serviceLocation.zones'
    ];

    public function serviceLocation()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }
}
-e 

========== app/Models/Admin/ZoneTypePackagePrice.php ==========
<?php
namespace App\Models\Admin;

use Carbon\Carbon;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class ZoneTypePackagePrice extends Model
{
    use HasActive, UuidModel,SoftDeletes;

     protected $table = 'zone_type_package_prices';

      protected $fillable = [
        'zone_type_id','base_price','package_type_id','distance_price_per_km','time_price_per_min','cancellation_fee','free_distance','free_min','zone_id'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'zoneType','zoneType.zone'
    ];


    public function PackageName()
    {
    	return $this->hasOne(\App\Models\Master\PackageType::class, 'id','package_type_id');
    }

    /**
     * The zone type that belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function zoneType()
    {
        return $this->belongsTo(ZoneType::class, 'zone_type_id', 'id');
    }
}
-e 

========== app/Models/Admin/AdminDetail.php ==========
<?php

namespace App\Models\Admin;

use App\Models\User;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\Admin\ServiceLocation;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;
use Nicolaslopezj\Searchable\SearchableTrait;

class AdminDetail extends Model
{
    use HasActive, UuidModel,SearchableTrait,HasActiveCompanyKey;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'admin_details';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'first_name', 'last_name', 'address', 'country','state','city','pincode','email','mobile','user_id','created_by','service_location_id'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [
        'profile_picture','service_location_name'
    ];


    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    public function serviceLocationDetail()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }

    /**
    * Get Service location's name
    *
    * @return string
    */
    public function getServiceLocationNameAttribute()
    {
        if (!$this->serviceLocationDetail()->exists()) {
            return null;
        }
        return $this->serviceLocationDetail->name;
    }
    /**
    * Get profile picture
    *
    * @return string
    */
    public function getProfilePictureAttribute()
    {
        if (!$this->user()->exists()) {
            return null;
        }
        return $this->user->profile_picture;
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    protected $searchable = [
        'columns' => [
            'admin_details.first_name' => 20,
            'admin_details.last_name'=> 20,
            'admin_details.email'=> 20,
            'admin_details.mobile'=> 20,
            'service_locations.name'=> 20,
        ],
        'joins' => [
            'service_locations' => ['admin_details.service_location_id','service_locations.id'],
        ],
    ];
}
-e 

========== app/Models/User.php ==========
<?php

namespace App\Models;

use Carbon\Carbon;
use App\Models\Country;
use App\Models\Access\Role;
use App\Models\Admin\Staff;
use App\Models\Admin\Driver;
use App\Models\Admin\Owner;
use App\Models\Request\Request;
use App\Models\Master\Developer;
use App\Models\Master\PocClient;
use App\Models\Traits\HasActive;
use App\Models\Admin\AdminDetail;
use App\Models\Admin\UserDetails;
use App\Models\Payment\UserWallet;
use Laravel\Passport\HasApiTokens;
use App\Models\LinkedSocialAccount;
use App\Models\Payment\DriverWallet;
use App\Base\Services\OTP\CanSendOTP;
use App\Models\Traits\DeleteOldFiles;
use App\Models\Traits\UserAccessTrait;
use Illuminate\Support\Facades\Storage;
use Illuminate\Notifications\Notifiable;
use App\Models\Payment\UserWalletHistory;
use App\Models\Traits\HasActiveCompanyKey;
use App\Models\Traits\UserAccessScopeTrait;
use App\Base\Services\OTP\CanSendOTPContract;
use Nicolaslopezj\Searchable\SearchableTrait;
use Illuminate\Foundation\Auth\User as Authenticatable;
use App\Models\Request\FavouriteLocation;
use App\Models\Payment\UserBankInfo;
use App\Models\Payment\WalletWithdrawalRequest;

class User extends Authenticatable implements CanSendOTPContract
{
    use CanSendOTP,
    DeleteOldFiles,
    HasActive,
    HasApiTokens,
    Notifiable,
    UserAccessScopeTrait,
    UserAccessTrait,
    SearchableTrait,
    HasActiveCompanyKey;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'users';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'username', 'email', 'password', 'mobile', 'country', 'profile_picture', 'email_confirmed', 'mobile_confirmed', 'email_confirmation_token', 'active','fcm_token','login_by','apn_token','timezone','rating','rating_total','no_of_ratings','refferal_code','referred_by','social_nickname','social_id','social_token','social_token_secret','social_refresh_token','social_expires_in','social_avatar','social_avatar_original','social_provider','company_key','lang','is_bid_app','authorization_code','is_deleted_at','gender'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token', 'email_confirmation_token',
    ];

    /**
     * The attributes that have files that should be auto deleted on updating or deleting.
     *
     * @var array
     */
    public $deletableFiles = [
        'profile_picture',
    ];

    /**
     * The attributes that can be used for sorting with query string filtering.
     *
     * @var array
     */
    public $sortable = [
        'id', 'name', 'username', 'email', 'mobile', 'profile_picture', 'last_login_at', 'created_at', 'updated_at',
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'roles', 'otp','requestDetail'
    ];

    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [

    ];

    /**
    * Get the Profile image full file path.
    *
    * @param string $value
    * @return string
    */
    public function getProfilePictureAttribute($value)
    {
        if (!$value) {
            $default_image_path = config('base.default.user.profile_picture');
            return url('/').$default_image_path;
        }
        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $value));
    }
    /**
     * Override the "boot" method of the model.
     *
     * @return void
     */
    public static function boot()
    {
        parent::boot();

        // Model event handlers
    }

    /**
     * Set the password using bcrypt hash if stored as plaintext.
     *
     * @param string $value
     */
    public function setPasswordAttribute($value)
    {
        $this->attributes['password'] = (password_get_info($value)['algo'] === 0) ? bcrypt($value) : $value;
    }

    /**
     * The roles associated with the user.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function roles()
    {
        return $this->belongsToMany(Role::class, 'role_user', 'user_id', 'role_id');
    }

    /**
     * The OTP associated with the user's mobile number.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function otp()
    {
        return $this->hasOne(MobileOtp::class, 'mobile', 'mobile');
    }

    /**
     * Get the user model for the given username.
     *
     * @param string $username
     * @return \Illuminate\Database\Eloquent\Model|null|static
     */
    public function findForPassport($username)
    {
        return $this->where($this->usernameField($username), $username)->first();
    }

    /**
     * Get the username attribute based on the input value.
     * Result is either 'email' or 'mobile'.
     *
     * @param string $username
     * @return string
     */
    public function usernameField($username)
    {
        return is_valid_email($username) ? 'email' : 'mobile';
    }

    /**
     * The default file upload path.
     *
     * @return string|null
     */
    public function uploadPath()
    {
        return config('base.user.upload.profile-picture.path');
    }

    /**
     * The Staff associated with the user's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function admin()
    {
        return $this->hasOne(AdminDetail::class, 'user_id', 'id');
    }

    /**
     * The Bank info associated with the user's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function bankInfo()
    {
        return $this->hasOne(UserBankInfo::class, 'user_id', 'id');
    }

    /**
     * The Staff associated with the user's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function developer()
    {
        return $this->hasOne(Developer::class, 'user_id', 'id');
    }

    /**
    * The user wallet history associated with the user's id.
    *
    * @return \Illuminate\Database\Eloquent\Relations\hasOne
    */
    public function userWalletHistory()
    {
        return $this->hasMany(UserWalletHistory::class, 'user_id', 'id');
    }

    /**
    * The favouriteLocations associated with the user's id.
    *
    * @return \Illuminate\Database\Eloquent\Relations\hasOne
    */
    public function favouriteLocations()
    {
        return $this->hasMany(FavouriteLocation::class, 'user_id', 'id');
    }

    public function userWallet()
    {
        return $this->hasOne(UserWallet::class, 'user_id', 'id');
    }
    public function driverWallet()
    {
        return $this->hasOne(DriverWallet::class, 'user_id', 'id');
    }

    public function withdrawalRequestsHistory()
    {
        return $this->hasMany(WalletWithdrawalRequest::class, 'user_id', 'id');
    }
    /**
     * The Driver associated with the user's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function driver()
    {
        return $this->hasOne(Driver::class, 'user_id', 'id');
    }

    public function accounts()
    {
        return $this->hasMany(LinkedSocialAccount::class, 'user_id', 'id');
    }
    public function requestDetail()
    {
        return $this->hasMany(Request::class, 'user_id', 'id');
    }

    /**
     * The Driver associated with the user's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function userDetails()
    {
        return $this->hasOne(UserDetails::class, 'user_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    /**
    * Specifies the user's FCM token
    *
    * @return string
    */
    public function routeNotificationForFcm()
    {
        return $this->fcm_token;
    }
    public function routeNotificationForApn()
    {
        return $this->apn_token;
    }

    

    protected $searchable = [
        'columns' => [
            'users.name' => 20,
            'users.email'=> 20,
            'users.mobile'=> 20
        ],
    ];

    /**
    * The driver that the country belongs to.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function countryDetail()
    {
        return $this->belongsTo(Country::class, 'country', 'id');
    }

    public function owner()
    {
        return $this->hasOne(Owner::class, 'user_id', 'id');
    }


}
-e 

========== app/Models/Customer.php ==========
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Customer extends Model
{
    protected $fillable = [
        'name','email','mobile','country','message'
    ];
}
-e 

========== app/Models/State.php ==========
<?php

namespace App\Models;

use App\Base\Slug\HasSlug;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;

class State extends Model {
	use HasActive, HasSlug, UuidModel;

	/**
	 * The table associated with the model.
	 *
	 * @var string
	 */
	protected $table = 'states';

	/**
	 * Indicates if the model should be timestamped.
	 *
	 * @var bool
	 */
	public $timestamps = false;

	/**
	 * The attributes that are mass assignable.
	 *
	 * @var array
	 */
	protected $fillable = [
		'slug', 'name', 'active',
	];

	/**
	 * The attributes that can be used for sorting with query string filtering.
	 *
	 * @var array
	 */
	public $sortable = [
		'name',
	];

	/**
	 * The relationships that can be loaded with query string filtering includes.
	 *
	 * @var array
	 */
	public $includes = [
		'cities',
	];

	/**
	 * The list of cities the state has.
	 *
	 * @return \Illuminate\Database\Eloquent\Relations\hasMany
	 */
	public function cities() {
		return $this->hasMany(City::class, 'state_id', 'id');
	}

	/**
	 * Get the attribute name to slugify.
	 *
	 * @return string
	 */
	public function getSlugSourceColumn() {
		return 'name';
	}
}
-e 

========== app/Models/Common/AdminUsersCompanyKey.php ==========
<?php

namespace App\Models\Common;

use App\Models\User;
use Illuminate\Database\Eloquent\Model;

class AdminUsersCompanyKey extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'admin_users_company_keys';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'admin_user_id', 'company_key', 'expiry_date','active'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'user'
    ];
    /**
     * The driver that the user_id belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function user()
    {
        return $this->belongsTo(User::class, 'admin_user_id', 'id');
    }
}
-e 

========== app/Models/Common/Subscriber.php ==========
<?php

namespace App\Models\Common;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;

class Subscriber extends Model
{
    use UuidModel;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'subscribers';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'status',
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];
}
-e 

========== app/Models/Cms/FrontPage.php ==========
<?php

namespace App\Models\Cms;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class FrontPage extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'landingpagecms';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'userid', 'faviconfile', 'bannerimage', 'description','playstoreicon1','playstoreicon2','firstrowimage1','firstrowheadtext1','firstrowsubtext1','firstrowimage2','firstrowheadtext2','firstrowsubtext2','firstrowimage3','firstrowheadtext3','firstrowsubtext3','secondrowimage1','secondrowheadtext1','secondrowimage2','secondrowheadtext2','secondrowimage3','secondrowheadtext3','footertextsub','footercopytextsub','safety','safetytext','serviceheadtext','servicesubtext','serviceimage','privacy','dmv','complaince','terms','web_booking_logo','web_booking_taxi','web_booking_rental','web_booking_delivery','web_booking_history'
    ];

    /**
    * Get the Profile image full file path.
    *
    * @param string $value
    * @return string
    */
    // public function getProfilePictureAttribute($value)
    // {
    //     if (empty($value)) {
    //         $default_image_path = config('base.default.user.profile_picture');
    //         return env('APP_URL').$default_image_path;
    //     }
    //     return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $value));
    // }


    public function getFavIconPictureAttribute($value)
    {

        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $value));
    }
    // public function getWebBookingLogoAttribute(){
    //     if (!$this->web_booking_logo) {
    //         return null;
    //     }
        // return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $this->web_booking_logo));
    // }

       /**
     * The default file upload path.
     *
     * @return string|null
     */
    public function uploadPath()
    {
        return config('base.cms.upload.web-picture.path');
    }



}
-e 

========== app/Models/Master/PackageType.php ==========
<?php

namespace App\Models\Master;

use App\Models\Traits\HasActive;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\Model;


class PackageType extends Model
{
    //
     use HasActive,HasActiveCompanyKey;

      /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'package_types';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['name','transport_type','active','description','short_description'];

   
}
-e 

========== app/Models/Master/MailTemplate.php ==========
<?php

namespace App\Models\Master;

use App\Models\Traits\HasActive;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\Model;
use Nicolaslopezj\Searchable\SearchableTrait;
use App\Base\Uuid\UuidModel;



class MailTemplate extends Model
{
    use HasActive,SearchableTrait,UuidModel;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'mail_templates';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['mail_type','active','description'];

    /**
     * Searchable rules.
     *
     * @var array
     */
    protected $searchable = [
        /**
         * Columns and their priority in search results.
         * Columns with higher values are more important.
         * Columns with equal values have equal importance.
         *
         * @var array
         */
        'columns' => [
            'mail_templates.mail_type' => 20,
            'mail_templates.description' => 20,
        ],

    ];

}
-e 

========== app/Models/Master/CarModel.php ==========
<?php

namespace App\Models\Master;

use App\Models\Traits\HasActive;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\Model;

class CarModel extends Model
{
    use HasActive,HasActiveCompanyKey;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'car_models';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['make_id','name','active'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'makeDetail'
    ];

    public function makeDetail()
    {
        return $this->belongsTo(CarMake::class, 'make_id', 'id');
    }
}
-e 

========== app/Models/Master/MobileBuild.php ==========
<?php

namespace App\Models\Master;

use Carbon\Carbon;
use Illuminate\Support\Str;
use App\Models\Traits\HasActive;
use App\Models\Master\ProjectFlavour;
use Illuminate\Database\Eloquent\Model;
use Nicolaslopezj\Searchable\SearchableTrait;

class MobileBuild extends Model
{
    use HasActive,SearchableTrait;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'mobile_builds';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['project_name','project_id','flavour_id','build_number','environment','team','version','download_link','additional_comments','file_size','active','uploaded_by','created_at'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];
    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = [
        'short_additional_comments','flavour_name'
    ];

    /**
    * Searchable rules.
    *
    * @var array
    */
    protected $searchable = [
        /**
         * Columns and their priority in search results.
         * Columns with higher values are more important.
         * Columns with equal values have equal importance.
         *
         * @var array
         */
        'columns' => [
            'mobile_builds.build_number' => 20,
        ],


    ];

    // public function getCreatedAtAttribute()
    // {
    //     return date('d-m-Y', strtotime($this->attributes['created_at']));
    // }

    public function flavour()
    {
        return $this->belongsTo(ProjectFlavour::class, 'flavour_id', 'id');
    }

    public function getFlavourNameAttribute()
    {
        return $this->flavour->flavour_name;
    }
    public function getShortAdditionalCommentsAttribute()
    {
        return Str::limit($this->additional_comments, 10, '...');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/Master/Developer.php ==========
<?php

namespace App\Models\Master;

use Illuminate\Database\Eloquent\Model;
use App\Base\Uuid\UuidModel;
use App\Models\User;

class Developer extends Model
{	use  UuidModel;
    /**
	 * The attributes that are mass assignable.
	 *
	 * @var array
	 */
	protected $fillable = [
		'first_name', 'last_name','user_id', 'address', 'country','state','city','pincode','email','mobile','team',
	];
	public function user(){
		return $this->belongsTo(User::class,'user_id','id');
	}
}
-e 

========== app/Models/Master/Project.php ==========
<?php

namespace App\Models\Master;

use Carbon\Carbon;
use App\Models\Master\PocClient;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;
use Nicolaslopezj\Searchable\SearchableTrait;

class Project extends Model
{
    use HasActive,SearchableTrait;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'projects';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['project_name','poc_name','poc_email','active'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'pocClient'
    ];
    /**
    * Searchable rules.
    *
    * @var array
    */
    protected $searchable = [
        /**
         * Columns and their priority in search results.
         * Columns with higher values are more important.
         * Columns with equal values have equal importance.
         *
         * @var array
         */
        'columns' => [
            'projects.project_name' => 20,
        ],
    ];

    /**
    * The client has many User.
    * @tested
    *
    * @return \Illuminate\Database\Eloquent\Relations\hasMany
    */
    public function pocClient()
    {
        return $this->hasMany(PocClient::class, 'project_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/Master/CarMake.php ==========
<?php

namespace App\Models\Master;

use App\Models\Traits\HasActive;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\Model;

class CarMake extends Model
{
    use HasActive,HasActiveCompanyKey;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'car_makes';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['name','transport_type','vehicle_make_for','active'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'modelDetail'
    ];

    public function modelDetail()
    {
        return $this->hasOne(CarModel::class, 'make_id', 'id');
    }
}
-e 

========== app/Models/Master/GoodsType.php ==========
<?php

namespace App\Models\Master;

use App\Models\Traits\HasActive;
use App\Models\Traits\HasActiveCompanyKey;
use Illuminate\Database\Eloquent\Model;

class GoodsType extends Model
{
    use HasActive,HasActiveCompanyKey;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'goods_types';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['goods_type_name','goods_types_for' , 'active','company_key'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];
}
-e 

========== app/Models/Master/ProjectFlavour.php ==========
<?php

namespace App\Models\Master;

use Illuminate\Database\Eloquent\Model;

class ProjectFlavour extends Model
{
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['flavour_name','app_name','bundle_identifier','project_id'];
}
-e 

========== app/Models/Master/PocClient.php ==========
<?php

namespace App\Models\Master;

use Illuminate\Database\Eloquent\Model;
use App\Base\Uuid\UuidModel;
use App\Models\User;
use App\Models\Master\Project;


class PocClient extends Model
{
	use UuidModel;

	   /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'poc_clients';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'user_id','project_id'
    ];

    /**
     * The roles associated with the user.
     *
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }
    // *
    //  * The roles associated with the user.
    //  *
    //  * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     
    // public function project()
    // {
    //     return $this->belongsTo(Project::class, 'id', 'project_id');
    // }
}
-e 

========== app/Models/Master/DistanceMatrix.php ==========
<?php

namespace App\Models\Master;

use Illuminate\Database\Eloquent\Model;

class DistanceMatrix extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'distance_matrixes';

    
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['origin_addresses','origin_lat','origin_lng','destination_addresses','destination_lat','destination_lng','distance','duration','json_result'];
}
-e 

========== app/Models/Master/BannerImage.php ==========
<?php

namespace App\Models\Master;

use Storage;
use Carbon\Carbon;
use App\Models\User;
use App\Base\Uuid\UuidModel;
use App\Models\Traits\HasActive;
use App\Models\Traits\DeleteOldFiles;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;
use Nicolaslopezj\Searchable\SearchableTrait;

class BannerImage extends Model
{
    use HasActive, UuidModel,DeleteOldFiles,SearchableTrait,HasActiveCompanyKey;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'banner_images';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
         'image','active'
    ];

    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = [

    ];

    /**
     * The attributes that have files that should be auto deleted on updating or deleting.
     *
     * @var array
     */
    public $deletableFiles = [
        'image'
    ];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

    /**
     * The admin that the uploaded image belongs to.
     * @tested
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function serviceLocation()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }

    /**
     * Get the Profile image full file path.
     *
     * @param string $value
     * @return string
     */
    public function getImageAttribute($value)
    {
        if (empty($value)) {
            return null;
        }

        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $value));
    }

    /**
     * The default file upload path.
     *
     * @return string|null
     */
    public function uploadPath()
    {
        return config('base.banner.upload.banner-image.path');
    }


    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/wasel_trip.php ==========
<?php

namespace App\Models;
use App\Traits\WaselTrait;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class wasel_trip extends Model
{
    use HasFactory, WaselTrait;

    protected $fillable = ['request_id', 'error_message', 'status'];
}
-e 

========== app/Models/TimeZone.php ==========
<?php

namespace App\Models;

use App\Base\Slug\HasSlug;
use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActive;

class TimeZone extends Model
{
    use UuidModel,HasActive;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'time_zones';

    /**
     * Indicates if the model should be timestamped.
     *
     * @var bool
     */
    public $timestamps = false;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name',
        'timezone'
    ];

    /**
     * The attributes that can be used for sorting with query string filtering.
     *
     * @var array
     */
    public $sortable = [
        'name',
    ];

    /**
     * @param $utc
     * @return mixed
     */
    public function setUtcAttribute($utc)
    {
        $this->attributes['utc'] = json_encode($utc);
    }
    /**
     * @param $utc
     * @return mixed
     */
    public function getUtcAttribute($utc)
    {
        return json_decode($utc);
    }
    /**
     * Get all the countries from the JSON file.
     *
     * @return array
     */
    public static function allJSON()
    {
        $route = dirname(dirname(__FILE__)) . '/Helpers/TimeZones/time_zones.json';
        return json_decode(file_get_contents($route), true);
    }
}
-e 

========== app/Models/Request/RequestBill.php ==========
<?php

namespace App\Models\Request;

use Illuminate\Database\Eloquent\Model;

use App\Models\wasel_trip;
use App\wasel\WaselClass;

use Illuminate\Support\Facades\Log;


class RequestBill extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'request_bills';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['request_id','base_price','base_distance','price_per_distance','distance_price','price_per_time','time_price','waiting_charge','cancellation_fee','service_tax','service_tax_percentage','promo_discount','admin_commision','driver_commision','total_amount','requested_currency_code','admin_commision_with_tax','total_distance','total_time','requested_currency_symbol','airport_surge_fee','before_trip_start_waiting_time','after_trip_start_waiting_time','calculated_waiting_time','waiting_charge_per_min','admin_commision_from_driver'
];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];
    public function requestDetail()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    }

    public function request()
    {
        return $this->belongsTo(Request::class);
    }

	protected static function boot()
    {
        parent::boot();

        static::created(function ($bill) {

            $requestTrip = $bill->requestDetail;
        
                $waselClient = new WaselClass();

                $validatedTrip = $waselClient->validateRequestData($requestTrip);

                if ($validatedTrip['status'] === true) {
                    $data = $validatedTrip['data'];

                    $response = $waselClient->registerTrip($data);

                    wasel_trip::create([
                        'request_id' => $requestTrip->id,
                        'status' => $response['status'] === true ? 'VALID' : 'INVALID',
                        'error_message' => $response['status'] !== true ? $response['message'] : null,
                    ]);
                }
        
        });
    }

}
-e 

========== app/Models/Request/RequestRating.php ==========
<?php

namespace App\Models\Request;

use App\Models\User;
use App\Models\Admin\Driver;
use App\Models\Request\Request;
use Illuminate\Database\Eloquent\Model;

class RequestRating extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'request_ratings';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['request_id','user_id','driver_id','rating','comment','user_rating','driver_rating'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
         'driverDetail','userDetail','requestDetail'
    ];

    /**
     * The request that the Rating belongs to.
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function requestDetail()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    }
    /**
     * The driver that the Rating belongs to.
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function driverDetail()
    {
        return $this->belongsTo(Driver::class, 'driver_id', 'id');
    }
    /**
     * The user that the Rating belongs to.
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function userDetail()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

     public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/Request/RequestDeliveryProof.php ==========
<?php

namespace App\Models\Request;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class RequestDeliveryProof extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'request_delivery_proofs';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['request_id','after_load','after_unload','proof_image'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'request'
    ];
    /**
     * The request that the meta belongs to.
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function request()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    }

    public function getProofImageAttribute($value){

        if (empty($value)) {
            return null;
        }

        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $value));
    }
    

    public function uploadPath()
    {
        return config('base.request.upload.delivery-proof.path');
    }
}
-e 

========== app/Models/Request/RequestEta.php ==========
<?php

namespace App\Models\Request;

use Illuminate\Database\Eloquent\Model;

class RequestEta extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'request_eta';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['request_id','base_price','base_distance','price_per_distance','distance_price','price_per_time','time_price','waiting_charge','cancellation_fee','service_tax','service_tax_percentage','promo_discount','admin_commision','driver_commision','total_amount','requested_currency_code','admin_commision_with_tax','total_distance','total_time','requested_currency_symbol','airport_surge_fee'
];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];
    public function requestDetail()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    }
}
-e 

========== app/Models/Request/Request.php ==========
<?php

namespace App\Models\Request;

use Carbon\Carbon;
use App\Models\User;
use App\Base\Uuid\UuidModel;
use App\Models\Admin\Driver;
use App\Models\Admin\ServiceLocation;
use App\Models\Admin\ZoneType;
use App\Models\Admin\UserDetails;
use App\Models\Request\AdHocUser;
use Illuminate\Database\Eloquent\Model;
use App\Models\Traits\HasActiveCompanyKey;
use Nicolaslopezj\Searchable\SearchableTrait;
use App\Models\Admin\CancellationReason;
use App\Models\Master\PackageType;
use App\Models\Admin\Owner;
use App\Models\Master\GoodsType;

use App\Models\wasel_trip;
use App\Traits\WaselTrait;
use App\wasel\WaselClass;

use App\Base\Constants\Masters\WalletRemarks;
use App\Jobs\Notifications\SendPushNotification;
use App\Models\Payment\DriverWalletHistory;
use App\Models\Payment\UserWalletHistory;
use Illuminate\Support\Facades\Log;



class Request extends Model
{
    use UuidModel, SearchableTrait, HasActiveCompanyKey;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'requests';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['request_number', 'is_later', 'assign_method', 'user_id', 'driver_id', 'trip_start_time', 'arrived_at', 'accepted_at', 'completed_at', 'cancelled_at', 'is_driver_started', 'is_driver_arrived', 'is_trip_start', 'is_completed', 'is_cancelled', 'reason', 'cancel_method', 'total_distance', 'total_time', 'payment_opt', 'is_paid', 'user_rated', 'driver_rated', 'promo_id', 'timezone', 'unit', 'if_dispatch', 'zone_type_id', 'requested_currency_code', 'custom_reason', 'attempt_for_schedule', 'service_location_id', 'company_key', 'dispatcher_id', 'book_for_other_contact', 'book_for_other', 'ride_otp', 'is_rental', 'rental_package_id', 'is_out_station', 'request_eta_amount', 'is_surge_applied', 'owner_id', 'fleet_id', 'goods_type_id', 'goods_type_quantity', 'requested_currency_symbol', 'offerred_ride_fare', 'accepted_ride_fare', 'is_bid_ride', 'instant_ride', 'return_time', 'is_round_trip', 'discounted_total', 'web_booking', 'on_search', 'poly_line', 'is_pet_available', 'is_luggage_available', 'transport_type'];


    /**
     * The accessors to append to the model's array form.
     *
     * @var array
     */
    protected $appends = [
        'vehicle_type_name',
        'pick_lat',
        'pick_lng',
        'drop_lat',
        'drop_lng',
        'pick_address',
        'drop_address',
        'converted_trip_start_time',
        'converted_arrived_at',
        'converted_accepted_at',
        'converted_completed_at',
        'converted_cancelled_at',
        'converted_created_at',
        'converted_updated_at',
        'vehicle_type_image',
        'vehicle_type_id',
        'converted_return_time'
    ];
    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'driverDetail',
        'userDetail',
        'requestBill'
    ];

    public $sortable = ['trip_start_time', 'created_at', 'updated_at'];


    protected static function boot()
    {
        parent::boot();

        static::updated(function ($requestTrip) {


            if ($requestTrip->is_completed === true) {
                $authUser = User::where('id', auth()->id())->whereNotNull('referred_by')->first();


                if (!$authUser)
                    return;

                $user = User::where('id', $authUser->referred_by)->first();


                if ($user) {
                    $refferal_code = $user->refferal_code;

                    if ($user->hasRole('user')) {
                        // check if this refferal code allready used
                        $isUsedRefferalCode = UserWalletHistory::where('remarks', WalletRemarks::REFERRAL_COMMISION)
                            ->where('refferal_code', $refferal_code)
                            ->where('reffered_user', $authUser->id)
                            ->first();

                        if ($isUsedRefferalCode)
                            return;

                        // Update referred user's id to the users table
                        $user_wallet = $user->userWallet;
                        $referral_commision = get_settings('referral_commision_for_user') ?: 0;

                        $user_wallet->amount_added += $referral_commision;
                        $user_wallet->amount_balance += $referral_commision;
                        $user_wallet->save();

                        Log::info('Attempting to create UserWalletHistory', ['user_id' => $user->id, 'amount' => $referral_commision]);

                    	Log::info('Refferal Code  => '  . $refferal_code);

                            UserWalletHistory::create([
                                'amount' => $referral_commision,
                                'transaction_id' => str_random(6),
                                'remarks' => WalletRemarks::REFERRAL_COMMISION,
                                'refferal_code' => $refferal_code,
                                'is_credit' => true,
                                'user_id' => $user->id,
                                'reffered_user' => $authUser->id
                            ]);


                        // Notify user
                        $title = trans('push_notifications.referral_earnings_notify_title', [], $user->lang);
                        $body = trans('push_notifications.referral_earnings_notify_body', [], $user->lang);

                        dispatch(new SendPushNotification($user, $title, $body));
                    } else {
                        $isUsedRefferalCode = DriverWalletHistory::where('remarks',  WalletRemarks::REFERRAL_COMMISION)
                            ->where('refferal_code', $refferal_code)
                            ->where('reffered_user', $authUser->id)
                            ->first();

                        if ($isUsedRefferalCode)
                            return;

                        // Add referral commission to the referred user
                        $reffered_user = $user->driver;


                        $driver_wallet = $reffered_user->driverWallet;
                        $referral_commision = get_settings('referral_commision_for_driver') ?: 0;

                        $driver_wallet->amount_added += $referral_commision;
                        $driver_wallet->amount_balance += $referral_commision;
                        $driver_wallet->save();



                        Log::info('Attempting to create UserWalletHistory', ['user_id' => $reffered_user->id, 'amount' => $referral_commision]);
						Log::info('Refferal Code  => '  . $refferal_code);
                        // Add the history
                        DriverWalletHistory::create([
                            'amount' => $referral_commision,
                            'transaction_id' => str_random(6),
                            'remarks' => WalletRemarks::REFERRAL_COMMISION,
                            'refferal_code' => $refferal_code,
                            'is_credit' => true,
                            'user_id' => $reffered_user->id,
                            'reffered_user' => $authUser->id
                        ]);


                        // Notify user
                        $title = trans('push_notifications.referral_earnings_notify_title', [], $reffered_user->lang);
                        $body = trans('push_notifications.referral_earnings_notify_body', [], $reffered_user->lang);

                        dispatch(new SendPushNotification($reffered_user, $title, $body));
                    }
                }
            }
        });
    }


    /**
     * The Request place associated with the request's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function requestPlace()
    {
        return $this->hasOne(RequestPlace::class, 'request_id', 'id');
    }

    public function requestRating()
    {
        return $this->hasMany(RequestRating::class, 'request_id', 'id');
    }

    /**
     * The Request Adhoc user associated with the request's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function adHocuserDetail()
    {
        return $this->hasOne(AdHocUser::class, 'request_id', 'id');
    }
    /**
     * The Request Bill associated with the request's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function requestBill()
    {
        return $this->hasOne(RequestBill::class, 'request_id', 'id');
    }
    /**
     * The Request Bill associated with the request's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function requestBillDetail()
    {
        return $this->hasOne(RequestBill::class, 'request_id', 'id');
    }
    /**
     * The Request meta associated with the request's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function requestMeta()
    {
        return $this->hasMany(RequestMeta::class, 'request_id', 'id');
    }

    public function rentalPackage()
    {
        return $this->belongsTo(PackageType::class, 'rental_package_id', 'id');
    }

    public function driverDetail()
    {
        return $this->belongsTo(Driver::class, 'driver_id', 'id');
    }

    public function ownerDetail()
    {
        return $this->belongsTo(Owner::class, 'owner_id', 'id');
    }

    public function userDetail()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    public function zoneType()
    {
        return $this->belongsTo(ZoneType::class, 'zone_type_id', 'id')->withTrashed();
    }

    /**
     * The Request place associated with the request's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function requestCancellationFee()
    {
        return $this->hasOne(RequestCancellationFee::class, 'request_id', 'id');
    }

    public function zoneTypePackage()
    {
        return $this->belongsTo(ZoneTypePackage::class, 'zone_type_id', 'id');
    }
    /**
     * Get request's pickup latitude.
     *
     * @return string
     */
    public function getPickLatAttribute()
    {
        if (!$this->requestPlace()->exists()) {
            return null;
        }
        return $this->requestPlace->pick_lat;
    }
    /**
     * Get request's pickup longitude.
     *
     * @return string
     */
    public function getPickLngAttribute()
    {
        if (!$this->requestPlace()->exists()) {
            return null;
        }
        return $this->requestPlace->pick_lng;
    }
    /**
     * Get request's drop latitude.
     *
     * @return string
     */
    public function getDropLatAttribute()
    {
        if (!$this->requestPlace()->exists()) {
            return null;
        }
        return $this->requestPlace->drop_lat;
    }
    /**
     * Get request's drop longitude.
     *
     * @return string
     */
    public function getDropLngAttribute()
    {
        if (!$this->requestPlace()->exists()) {
            return null;
        }
        return $this->requestPlace->drop_lng;
    }
    /**
     * Get request's pickup address.
     *
     * @return string
     */
    public function getPickAddressAttribute()
    {
        if (!$this->requestPlace()->exists()) {
            return null;
        }
        return $this->requestPlace->pick_address;
    }
    /**
     * Get request's drop address.
     *
     * @return string
     */
    public function getDropAddressAttribute()
    {
        if (!$this->requestPlace()->exists()) {
            return null;
        }
        return $this->requestPlace->drop_address;
    }
    /**
     * Get vehicle type's name.
     *
     * @return string
     */
    public function getVehicleTypeNameAttribute()
    {
        if ($this->zoneType == null) {
            return null;
        }
        if (!$this->zoneType->vehicleType()->exists()) {
            return null;
        }
        return $this->zoneType->vehicleType->name;
    }
    /**a
     * Get vehicle type's name.
     *
     * @return string
     */
    public function getVehicleTypeImageAttribute()
    {
        if ($this->zoneType == null) {
            return null;
        }
        if (!$this->zoneType->vehicleType()->exists()) {
            return null;
        }
        return $this->zoneType->vehicleType->icon;
    }
    /**
     * Get vehicle type's name.
     *
     * @return string
     */
    public function getVehicleTypeIdAttribute()
    {
        if ($this->zoneType == null) {
            return null;
        }
        if (!$this->zoneType->vehicleType()->exists()) {
            return null;
        }
        return $this->zoneType->vehicleType->id;
    }
    /**
     * Get formated and converted timezone of user's Trip start time.
     * @return string
     */
    public function getConvertedTripStartTimeAttribute()
    {
        if ($this->trip_start_time == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->trip_start_time)->setTimezone($timezone)->format('jS M h:i A');
    }

    /**
     * Get formated and converted timezone of user's Trip start time.
     * @return string
     */
    public function getConvertedReturnTimeAttribute()
    {
        if ($this->return_time == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->return_time)->setTimezone($timezone)->format('jS M h:i A');
    }

    /**
     * Get formated and converted timezone of user's arrived at.
     * @return string
     */
    public function getConvertedArrivedAtAttribute()
    {
        if ($this->arrived_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->arrived_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
     * Get formated and converted timezone of user's accepted at.
     * @return string
     */
    public function getConvertedAcceptedAtAttribute()
    {
        if ($this->accepted_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->accepted_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
     * Get formated and converted timezone of user's completed_at at.
     * @return string
     */
    public function getConvertedCompletedAtAttribute()
    {
        if ($this->completed_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->completed_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
     * Get formated and converted timezone of user's cancelled at.
     * @return string
     */
    public function getConvertedCancelledAtAttribute()
    {
        if ($this->cancelled_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->cancelled_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
     * Get formated and converted timezone of user's created at.
     * @return string
     */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    /**
     * Get formatted and converted timezone of user's Trip start time in "dd/mm/yyyy" format.
     * @return string
     */
    public function getConvertedTripStartTimeDateAttribute()
    {
        if ($this->trip_start_time == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->trip_start_time)->setTimezone($timezone)->format('d/m/Y');
    }

    /**
     * Get formatted and converted timezone of user's arrived at in "dd/mm/yyyy" format.
     * @return string
     */
    public function getConvertedArrivedAtDateAttribute()
    {
        if ($this->arrived_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->arrived_at)->setTimezone($timezone)->format('d/m/Y');
    }

    /**
     * Get formatted and converted timezone of user's accepted at in "dd/mm/yyyy" format.
     * @return string
     */
    public function getConvertedAcceptedAtDateAttribute()
    {
        if ($this->accepted_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->accepted_at)->setTimezone($timezone)->format('d/m/Y');
    }

    /**
     * Get formatted and converted timezone of user's completed_at at in "dd/mm/yyyy" format.
     * @return string
     */
    public function getConvertedCompletedAtDateAttribute()
    {
        if ($this->completed_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->completed_at)->setTimezone($timezone)->format('d/m/Y');
    }

    /**
     * Get formatted and converted timezone of user's cancelled at in "dd/mm/yyyy" format.
     * @return string
     */
    public function getConvertedCancelledAtDateAttribute()
    {
        if ($this->cancelled_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->cancelled_at)->setTimezone($timezone)->format('d/m/Y');
    }

    /**
     * Get formatted and converted timezone of user's created at in "dd/mm/yyyy" format.
     * @return string
     */
    public function getConvertedCreatedAtDateAttribute()
    {
        if ($this->created_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('d/m/Y');
    }


    /**
     * Get formated and converted timezone of user's created at.
     * @return string
     */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at == null) {
            return null;
        }
        $timezone = $this->serviceLocationDetail->timezone ?: env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }

    public function getRequestUnitAttribute()
    {
        if ($this->unit == '1') {
            return 'Km';
        } else {
            return 'Miles';
        }
    }

    public function getCurrencyAttribute()
    {
        if ($this->zoneType->zone->serviceLocation->exists()) {
            return $this->zoneType->zone->serviceLocation->currency_symbol;
        }
        return get_settings('currency_symbol');
    }

    protected $searchable = [
        'columns' => [
            'requests.request_number' => 20,
            'users.name' => 20,
            'drivers.name' => 20,
        ],
        'joins' => [
            'users' => ['requests.user_id', 'users.id'],
            'drivers' => ['requests.driver_id', 'drivers.id'],
        ],
    ];

    /**
     * The Request Chat associated with the request's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasMany
     */
    public function requestChat()
    {
        return $this->hasMany(Chat::class, 'request_id', 'id');
    }

    public function serviceLocationDetail()
    {
        return $this->belongsTo(ServiceLocation::class, 'service_location_id', 'id');
    }

    public function cancelReason()
    {
        return $this->hasOne(CancellationReason::class, 'id', 'reason');
    }
    public function goodsTypeDetail()
    {
        return $this->belongsTo(GoodsType::class, 'goods_type_id', 'id');
    }

    /**
     * The Request Stops associated with the request's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function requestStops()
    {
        return $this->hasMany(RequestStop::class, 'request_id', 'id');
    }

    /**
     * The Request proof associated with the request's id.
     *
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function requestProofs()
    {
        return $this->hasMany(RequestDeliveryProof::class, 'request_id', 'id');
    }
}


 //             if ($requestTrip->is_completed === true && $requestTrip->requestBill !== null) {

            //                 $waselClient = new WaselClass();


            //                 $validatedTrip = $waselClient->validateRequestData($requestTrip);

            //                 if ($validatedTrip['status'] === true) {
            //                     $data = $validatedTrip['data'];

            //                     $response = $waselClient->registerTrip($data);

            //                     wasel_trip::create([
            //                         'request_id' => $requestTrip->id,
            //                         'status' => $response['status'] === true ? 'VALID' : 'INVALID',
            //                         'error_message' => $response['status'] !== true ? $response['message'] : null,
            //                     ]);
            //                 }
            //             }
-e 

========== app/Models/Request/RequestMeta.php ==========
<?php

namespace App\Models\Request;

use Carbon\Carbon;
use App\Models\Admin\Driver;
use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;

class RequestMeta extends Model
{
    use HasActive;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'requests_meta';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['active','request_id','user_id','driver_id','assign_method','is_later','distance_to_pickup'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'request','request.requestPlace'
    ];

    /**
     * The request that the meta belongs to.
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function request()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    }
    /**
    * The request that the meta belongs to.
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function driver()
    {
        return $this->belongsTo(Driver::class, 'driver_id', 'id');
    }

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }
    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedUpdatedAtAttribute()
    {
        if ($this->updated_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->updated_at)->setTimezone($timezone)->format('jS M h:i A');
    }
}
-e 

========== app/Models/Request/DriverRejectedRequest.php ==========
<?php

namespace App\Models\Request;

use Illuminate\Database\Eloquent\Model;

class DriverRejectedRequest extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'driver_rejected_requests';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['request_id','driver_id','is_after_accept','reason','custom_reason'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    
    public $includes = [

    ];
}

-e 

========== app/Models/Request/FavouriteLocation.php ==========
<?php

namespace App\Models\Request;

use Illuminate\Database\Eloquent\Model;

class FavouriteLocation extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'favourite_locations';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['pick_lat','pick_lng','drop_lat','drop_lng','pick_address','drop_address','address_name','landmark','user_id'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];
}
-e 

========== app/Models/Request/RequestCancellationFee.php ==========
<?php

namespace App\Models\Request;

use App\Models\Request\Request;
use App\Models\User;
use App\Models\Admin\Driver;
use Illuminate\Database\Eloquent\Model;

class RequestCancellationFee extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'request_cancellation_fees';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['request_id','user_id','driver_id','is_paid','paid_request_id','cancellation_fee'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

    /**
     * The request that the cancellation fee belongs to.
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function requestDetail()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    } 

   

    public function userDetail()
    {
        return $this->hasOne(User::class, 'id', 'user_id');
    }

    public function driverDetail()
    {
        return $this->hasOne(Driver::class, 'id', 'driver_id');
    }

    /**
     * The request that the cancellation fee belongs to.
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function paidRequestDetail()
    {
        return $this->belongsTo(Request::class, 'paid_request_id', 'id');
    }
}
-e 

========== app/Models/Request/RequestCycles.php ==========
<?php

namespace App\Models\Request;

use Carbon\Carbon;
use App\Models\User; 
use Illuminate\Database\Eloquent\Model;


class RequestCycles extends Model
{ 
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'request_cycles';


    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'request_id', // Add 'request_id' to the fillable array 
        'user_id',
        'driver_id',
        'request_data',
        'orderby_status'
    ];


    
}
-e 

========== app/Models/Request/RequestPlace.php ==========
<?php

namespace App\Models\Request;

use Illuminate\Database\Eloquent\Model;

class RequestPlace extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'request_places';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['request_id','pick_lat','pick_lng','drop_lat','drop_lng','pick_address','drop_address','active','request_path','pickup_poc_name','pickup_poc_mobile','drop_poc_name','drop_poc_mobile','pickup_poc_instruction','drop_poc_instruction'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];
}
-e 

========== app/Models/Request/Chat.php ==========
<?php

namespace App\Models\Request;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;


class Chat extends Model
{
    use UuidModel;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'chats';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['message','from_type','request_id','user_id','request_id','user_id','delivered','seen','created_at'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [

    ];

     /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [
       'converted_created_at'
    ];

     /**
    * Get formated and converted timezone of user's created at.
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null) {
            return null;
        }
        
        $timezone = $this->requestDetail()->pluck('timezone')->first()?:env('SYSTEM_DEFAULT_TIMEZONE');

        return (string)Carbon::parse($this->created_at)->setTimezone($timezone)->format('g:i A');
    }


     /**
     * The request that the meta belongs to.
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function requestDetail()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    }

}
-e 

========== app/Models/Request/RequestStop.php ==========
<?php

namespace App\Models\Request;

use Illuminate\Database\Eloquent\Model;

class RequestStop extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'request_stops';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['request_id','address','latitude','longitude','poc_name','poc_mobile','order','poc_instruction'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'request'
    ];
    /**
     * The request that the meta belongs to.
     *
     * @return \Illuminate\Database\Eloquent\Relations\belongsTo
     */
    public function request()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    }
}
-e 

========== app/Models/Request/AdHocUser.php ==========
<?php

namespace App\Models\Request;

use App\Models\Traits\HasActive;
use Illuminate\Database\Eloquent\Model;

class AdHocUser extends Model
{
    use HasActive;
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'adhoc_users';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['request_id','name','email','mobile','active'];

    /**
     * The relationships that can be loaded with query string filtering includes.
     *
     * @var array
     */
    public $includes = [
        'request','request.requestPlace'
    ];
    /**
    * The accessors to append to the model's array form.
    *
    * @var array
    */
    protected $appends = [
        'profile_picture'
    ];

    /**
    * The request that the meta belongs to.
    *
    * @return \Illuminate\Database\Eloquent\Relations\belongsTo
    */
    public function request()
    {
        return $this->belongsTo(Request::class, 'request_id', 'id');
    }

    public function getProfilePicAttribute()
    {
        $default_image_path = config('base.default.user.profile_picture');
        return env('APP_URL').$default_image_path;
    }
}
-e 

========== app/Models/ThirdPartySetting.php ==========
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;
use App\Base\Uuid\UuidModel;

class ThirdPartySetting extends Model
{

    use UuidModel;


    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'third_party_settings';


    /**
     * Indicates if the IDs are auto-incrementing.
     *
     * @var bool
     */
    public $incrementing = false;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name',
        'value',
        'module'
    ];


}
-e 

========== app/Models/Chat.php ==========
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\User;
use App\Models\Traits\HasActive;
use App\Base\Uuid\UuidModel; 

class Chat extends Model
{
    use HasFactory,HasActive,UuidModel;  
    
    protected $table = 'chat';

    protected $fillable = ['id','user_id'];  


    protected $appends = [];

    public function chat_messages(){
        return $this->hasMany(ChatMessage::class,'chat_id','id');
    }

    public function user_detail(){
        return $this->belongsTo(User::class,'user_id','id');
    } 


}
-e 

========== app/Models/Setting.php ==========
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;

class Setting extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'settings';


    /**
     * Indicates if the IDs are auto-incrementing.
     *
     * @var bool
     */
    public $incrementing = false;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name',
        'category',
        'value',
        'option_value',
        'field',
        'group_name'
    ];

    public function getAppLogoAttribute(){
        if (!$this->value) {
            return null;
        }
        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $this->value));
    }

    public function getFavIconAttribute(){
        if (!$this->value) {
            return null;
        }
        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $this->value));
    }

    public function getLoginBgAttribute(){
        if (!$this->value) {
            return null;
        }
        return Storage::disk(env('FILESYSTEM_DRIVER'))->url(file_path($this->uploadPath(), $this->value));
    }

    public function uploadPath(){
        return config('base.system-admin.upload.logo.path');
    }
}
-e 

========== app/Models/MailOtp.php ==========
<?php

namespace App\Models;

use App\Base\Uuid\UuidModel;
use Illuminate\Database\Eloquent\Model;
use Carbon\Carbon;
use Nicolaslopezj\Searchable\SearchableTrait;

class MailOtp extends Model {
	use UuidModel;

	/**
	 * The table associated with the model.
	 *
	 * @var string
	 */
	protected $table = 'mail_otp_verifications';

	/**
	 * The attributes that are mass assignable.
	 *
	 * @var array
	 */
	protected $fillable = [
		'email', 'otp', 'verified',
	];

	/**
	 * The user who owns the mobile number.
	 *
	 * @return \Illuminate\Database\Eloquent\Relations\belongsTo
	 */
	public function user() {
		return $this->belongsTo(User::class, 'email', 'email');
	}

	/**
	 * Check if the OTP for the mobile number has been verified.
	 *
	 * @return bool
	 */
	public function isVerified() {
		return (bool) $this->verified;
	}

    /**
    * Get formated and converted timezone of user's created at.
    *
    * @param string $value
    * @return string
    */
    public function getConvertedCreatedAtAttribute()
    {
        if ($this->created_at==null||!auth()->user()->exists()) {
            return null;
        }
        $timezone = auth()->user()->timezone?:env('SYSTEM_DEFAULT_TIMEZONE');
        return Carbon::parse($this->created_at)->setTimezone($timezone)->format('jS M h:i A');
    }

}
-e 

========== app/Models/ChatMessage.php ==========
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\User;
 

class ChatMessage extends Model
{ 
    use HasFactory;

    protected $table = 'chat_messages';

    protected $fillable = ['id','chat_id','image_url','message','unseen_count','image_status','from_id','to_id'];  

    protected $append = ['from_details','to_details'];


    public function chat_messages(){
        return $this->belongsTo(Chat::class,'chat_id','id');
    }
     // Define the relationship with the User model for the 'from' user
     public function fromUser()
     {
         return $this->belongsTo(User::class, 'from_id');
     }
      
     // Define the relationship with the User model for the 'to' user
     public function toUser()
     {
         return $this->belongsTo(User::class, 'to_id');
     }
     public function getFromDetailsAttribute(){
        $user = new \Stdclass();
        $user->name = $this->fromUser->name;
        $user->profile_image = $this->fromUser->profile_picture;
        return $user;
     }


}
-e 

